# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_oem7_msgs/Translation.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import novatel_oem7_msgs.msg

class Translation(genpy.Message):
  _md5sum = "34a33c30602027b15fedd37f626423de"
  _type = "novatel_oem7_msgs/Translation"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """TranslationOffset           translation
INSFrame                    frame
float32                     x_offset
float32                     y_offset
float32                     z_offset
float32                     x_uncertainty
float32                     y_uncertainty
float32                     z_uncertainty
INSSourceStatus             translation_source
================================================================================
MSG: novatel_oem7_msgs/TranslationOffset
uint32      ANT1        =  1
uint32      ANT2        =  2
uint32      EXTERNAL    =  3
uint32      USER        =  4
uint32      MARK1       =  5
uint32      MARK2       =  6
uint32      GIMBAL      =  7
uint32      MARK3       =  9
uint32      MARK4       = 10

uint32 type

================================================================================
MSG: novatel_oem7_msgs/INSFrame
uint32 IMUBODY = 0
uint32 VEHICLE = 1

uint32 frame
================================================================================
MSG: novatel_oem7_msgs/INSSourceStatus
uint32 FROM_NVM           = 1
uint32 CALIBRATING        = 2
uint32 CALIBRATED         = 3
uint32 FROM_COMMAND       = 4
uint32 RESET              = 5
uint32 FROM_DUAL_ANT      = 6
uint32 INS_CONVERSING     = 7
uint32 INSUFFICIENT_SPEED = 8
uint32 HIGH_ROTATION      = 9

uint32 status"""
  __slots__ = ['translation','frame','x_offset','y_offset','z_offset','x_uncertainty','y_uncertainty','z_uncertainty','translation_source']
  _slot_types = ['novatel_oem7_msgs/TranslationOffset','novatel_oem7_msgs/INSFrame','float32','float32','float32','float32','float32','float32','novatel_oem7_msgs/INSSourceStatus']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       translation,frame,x_offset,y_offset,z_offset,x_uncertainty,y_uncertainty,z_uncertainty,translation_source

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Translation, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.translation is None:
        self.translation = novatel_oem7_msgs.msg.TranslationOffset()
      if self.frame is None:
        self.frame = novatel_oem7_msgs.msg.INSFrame()
      if self.x_offset is None:
        self.x_offset = 0.
      if self.y_offset is None:
        self.y_offset = 0.
      if self.z_offset is None:
        self.z_offset = 0.
      if self.x_uncertainty is None:
        self.x_uncertainty = 0.
      if self.y_uncertainty is None:
        self.y_uncertainty = 0.
      if self.z_uncertainty is None:
        self.z_uncertainty = 0.
      if self.translation_source is None:
        self.translation_source = novatel_oem7_msgs.msg.INSSourceStatus()
    else:
      self.translation = novatel_oem7_msgs.msg.TranslationOffset()
      self.frame = novatel_oem7_msgs.msg.INSFrame()
      self.x_offset = 0.
      self.y_offset = 0.
      self.z_offset = 0.
      self.x_uncertainty = 0.
      self.y_uncertainty = 0.
      self.z_uncertainty = 0.
      self.translation_source = novatel_oem7_msgs.msg.INSSourceStatus()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I6fI().pack(_x.translation.type, _x.frame.frame, _x.x_offset, _x.y_offset, _x.z_offset, _x.x_uncertainty, _x.y_uncertainty, _x.z_uncertainty, _x.translation_source.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.translation is None:
        self.translation = novatel_oem7_msgs.msg.TranslationOffset()
      if self.frame is None:
        self.frame = novatel_oem7_msgs.msg.INSFrame()
      if self.translation_source is None:
        self.translation_source = novatel_oem7_msgs.msg.INSSourceStatus()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.translation.type, _x.frame.frame, _x.x_offset, _x.y_offset, _x.z_offset, _x.x_uncertainty, _x.y_uncertainty, _x.z_uncertainty, _x.translation_source.status,) = _get_struct_2I6fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I6fI().pack(_x.translation.type, _x.frame.frame, _x.x_offset, _x.y_offset, _x.z_offset, _x.x_uncertainty, _x.y_uncertainty, _x.z_uncertainty, _x.translation_source.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.translation is None:
        self.translation = novatel_oem7_msgs.msg.TranslationOffset()
      if self.frame is None:
        self.frame = novatel_oem7_msgs.msg.INSFrame()
      if self.translation_source is None:
        self.translation_source = novatel_oem7_msgs.msg.INSSourceStatus()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.translation.type, _x.frame.frame, _x.x_offset, _x.y_offset, _x.z_offset, _x.x_uncertainty, _x.y_uncertainty, _x.z_uncertainty, _x.translation_source.status,) = _get_struct_2I6fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I6fI = None
def _get_struct_2I6fI():
    global _struct_2I6fI
    if _struct_2I6fI is None:
        _struct_2I6fI = struct.Struct("<2I6fI")
    return _struct_2I6fI
