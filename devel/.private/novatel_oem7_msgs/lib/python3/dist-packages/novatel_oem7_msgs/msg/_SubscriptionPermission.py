# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_oem7_msgs/SubscriptionPermission.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SubscriptionPermission(genpy.Message):
  _md5sum = "26a38946e2a0a7f998387e8bc02b6d0c"
  _type = "novatel_oem7_msgs/SubscriptionPermission"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 RESERVED_1                = 511             # 0x000001FF
uint32 TERRASTAR_C_SERVICE       = 512             # 0x00000200
uint32 TERRASTAR_L_SERVICE       = 1024            # 0x00000400
uint32 RTK_ASSIST_SERVICE        = 2048            # 0x00000800
uint32 RTK_ASSIST_PRO_SERVICE    = 4096            # 0x00001000
uint32 TERRASTAR_C_PRO_SERVICE   = 8192            # 0x00002000
uint32 TERRASTAR_X_SERVICE       = 16384           # 0x00004000
uint32 RESERVED_2                = 4294934528      # 0xFFFF8000


uint32 permission"""
  # Pseudo-constants
  RESERVED_1 = 511
  TERRASTAR_C_SERVICE = 512
  TERRASTAR_L_SERVICE = 1024
  RTK_ASSIST_SERVICE = 2048
  RTK_ASSIST_PRO_SERVICE = 4096
  TERRASTAR_C_PRO_SERVICE = 8192
  TERRASTAR_X_SERVICE = 16384
  RESERVED_2 = 4294934528

  __slots__ = ['permission']
  _slot_types = ['uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       permission

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SubscriptionPermission, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.permission is None:
        self.permission = 0
    else:
      self.permission = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.permission
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.permission,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.permission
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.permission,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
