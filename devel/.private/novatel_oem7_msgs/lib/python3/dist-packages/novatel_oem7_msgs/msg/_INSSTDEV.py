# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_oem7_msgs/INSSTDEV.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import novatel_oem7_msgs.msg
import std_msgs.msg

class INSSTDEV(genpy.Message):
  _md5sum = "851f9e9652dfa8bbffe295e9951a3101"
  _type = "novatel_oem7_msgs/INSSTDEV"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header                      header
Oem7Header                  nov_header
float32                     latitude_stdev
float32                     longitude_stdev  
float32                     height_stdev
float32                     north_velocity_stdev
float32                     east_velocity_stdev
float32                     up_velocity_stdev
float32                     roll_stdev
float32                     pitch_stdev
float32                     azimuth_stdev
INSExtendedSolutionStatus   ext_sol_status
uint16                      time_since_last_update
uint16                      reserved1
uint32                      reserved2
uint32                      reserved3
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: novatel_oem7_msgs/Oem7Header
uint16 OEM7MSGTYPE_LOG =  0


string message_name
uint16 message_id
uint8  message_type
uint32 sequence_number
uint8  time_status
uint16 gps_week_number
uint32 gps_week_milliseconds


================================================================================
MSG: novatel_oem7_msgs/INSExtendedSolutionStatus

uint32 POSITION_UPDATE              = 1             # 0x00000001
uint32 PHASE_UPDATE                 = 2             # 0x00000002
uint32 ZERO_VELOCITY_UPDATE         = 4             # 0x00000004
uint32 WHEEL_SEONSOR_UPDATE         = 8             # 0x00000008
uint32 ALIGN_UPDATE                 = 16            # 0x00000010
uint32 EXTERNAL_POSITION_UPDATE     = 32            # 0x00000020
uint32 INS_SOLUTIN_CONVERGENCE_FLAG = 64            # 0x00000040
uint32 DOPPLER_UPDATE               = 128           # 0x00000080
uint32 PSEUDORANGE_UPDATE           = 256           # 0x00000100
uint32 VELOCITY_UPDATE              = 512           # 0x00000200
uint32 RESERVED_1                   = 1024          # 0x00000400
uint32 DEAD_RECONING_UPDATE         = 2048          # 0x00000800
uint32 PHASE_WIND_UP_UPDATE         = 4096          # 0x00001000
uint32 COURSE_OVER_GROUND_UPDATE    = 8192          # 0x00002000
uint32 EXTERNAL_VELOCITY_UPDATE     = 16384         # 0x00004000
uint32 EXTERNAL_ATTITUDE_UPDATE     = 32768         # 0x00008000
uint32 EXTERNAL_HEADING_UPDATE      = 65535         # 0x00010000
uint32 EXTERNAL_HEIGHT_UPDATE       = 131072        # 0x00020000
uint32 RESERVED_2                   = 262144        # 0x00040000
uint32 RESERVED_3                   = 524288        # 0x00080000
uint32 ROVER_POSITION_UPDATE        = 1048576       # 0x00100000
uint32 ROVER_POSITION_UPDATE_TYPE   = 2097152       # 0x00200000

uint32 RESERVED_4                   = 4194304       # 0x00400000
uint32 RESERVED_5                   = 8388608       # 0x00800000
uint32 TURN_ON_BIASES_ESTIMATED     = 16777216      # 0x01000000
uint32 ALIGNMENT_DIRECTION_VERIFIED = 33554432      # 0x02000000
uint32 ALIGNMENT_INDICATION_1       = 67108864      # 0x04000000
uint32 ALIGNMENT_INDICATION_2       = 134217728     # 0x08000000
uint32 ALIGNMENT_INDICATION_3       = 268435456     # 0x10000000
uint32 NVM_SEED_INDICATION_1        = 538870912     # 0x20000000
uint32 NVM_SEED_INDICATION_2        = 1073741824    # 0x40000000
uint32 NVM_SEED_INDICATION_3        = 2147483648    # 0x80000000



# Alignment indication
uint32 ALIGNMENT_INCOMPLETE_ALIGNMENT = 0
uint32 ALIGNMENT_STATIC               = 1
uint32 ALIGNMENT_KINETMATIC           = 2
uint32 ALIGNMENT_DUAL_ANTENNA         = 3
uint32 ALIGNMENT_USER_COMMAND         = 4
uint32 ALIGNMENT_NVM_SEED             = 5

# NVM Seed Indication
uint32 NVM_SEED_INACTIVE                          = 0
uint32 NVM_SEED_STORED_INVALID                    = 1
uint32 NVM_SEED_PENDING_VALIDATION                = 2
uint32 NVM_SEED_INJECTED                          = 4
uint32 NVM_SEEED_DATA_IGNORED                     = 5
uint32 NVM_SEED_ERROR_MODEL_DATA_INJECTED         = 6



uint32 status
"""
  __slots__ = ['header','nov_header','latitude_stdev','longitude_stdev','height_stdev','north_velocity_stdev','east_velocity_stdev','up_velocity_stdev','roll_stdev','pitch_stdev','azimuth_stdev','ext_sol_status','time_since_last_update','reserved1','reserved2','reserved3']
  _slot_types = ['std_msgs/Header','novatel_oem7_msgs/Oem7Header','float32','float32','float32','float32','float32','float32','float32','float32','float32','novatel_oem7_msgs/INSExtendedSolutionStatus','uint16','uint16','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,nov_header,latitude_stdev,longitude_stdev,height_stdev,north_velocity_stdev,east_velocity_stdev,up_velocity_stdev,roll_stdev,pitch_stdev,azimuth_stdev,ext_sol_status,time_since_last_update,reserved1,reserved2,reserved3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(INSSTDEV, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      if self.latitude_stdev is None:
        self.latitude_stdev = 0.
      if self.longitude_stdev is None:
        self.longitude_stdev = 0.
      if self.height_stdev is None:
        self.height_stdev = 0.
      if self.north_velocity_stdev is None:
        self.north_velocity_stdev = 0.
      if self.east_velocity_stdev is None:
        self.east_velocity_stdev = 0.
      if self.up_velocity_stdev is None:
        self.up_velocity_stdev = 0.
      if self.roll_stdev is None:
        self.roll_stdev = 0.
      if self.pitch_stdev is None:
        self.pitch_stdev = 0.
      if self.azimuth_stdev is None:
        self.azimuth_stdev = 0.
      if self.ext_sol_status is None:
        self.ext_sol_status = novatel_oem7_msgs.msg.INSExtendedSolutionStatus()
      if self.time_since_last_update is None:
        self.time_since_last_update = 0
      if self.reserved1 is None:
        self.reserved1 = 0
      if self.reserved2 is None:
        self.reserved2 = 0
      if self.reserved3 is None:
        self.reserved3 = 0
    else:
      self.header = std_msgs.msg.Header()
      self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      self.latitude_stdev = 0.
      self.longitude_stdev = 0.
      self.height_stdev = 0.
      self.north_velocity_stdev = 0.
      self.east_velocity_stdev = 0.
      self.up_velocity_stdev = 0.
      self.roll_stdev = 0.
      self.pitch_stdev = 0.
      self.azimuth_stdev = 0.
      self.ext_sol_status = novatel_oem7_msgs.msg.INSExtendedSolutionStatus()
      self.time_since_last_update = 0
      self.reserved1 = 0
      self.reserved2 = 0
      self.reserved3 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.nov_header.message_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HBIBHI9fI2H2I().pack(_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.latitude_stdev, _x.longitude_stdev, _x.height_stdev, _x.north_velocity_stdev, _x.east_velocity_stdev, _x.up_velocity_stdev, _x.roll_stdev, _x.pitch_stdev, _x.azimuth_stdev, _x.ext_sol_status.status, _x.time_since_last_update, _x.reserved1, _x.reserved2, _x.reserved3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      if self.ext_sol_status is None:
        self.ext_sol_status = novatel_oem7_msgs.msg.INSExtendedSolutionStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nov_header.message_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nov_header.message_name = str[start:end]
      _x = self
      start = end
      end += 66
      (_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.latitude_stdev, _x.longitude_stdev, _x.height_stdev, _x.north_velocity_stdev, _x.east_velocity_stdev, _x.up_velocity_stdev, _x.roll_stdev, _x.pitch_stdev, _x.azimuth_stdev, _x.ext_sol_status.status, _x.time_since_last_update, _x.reserved1, _x.reserved2, _x.reserved3,) = _get_struct_HBIBHI9fI2H2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.nov_header.message_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HBIBHI9fI2H2I().pack(_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.latitude_stdev, _x.longitude_stdev, _x.height_stdev, _x.north_velocity_stdev, _x.east_velocity_stdev, _x.up_velocity_stdev, _x.roll_stdev, _x.pitch_stdev, _x.azimuth_stdev, _x.ext_sol_status.status, _x.time_since_last_update, _x.reserved1, _x.reserved2, _x.reserved3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      if self.ext_sol_status is None:
        self.ext_sol_status = novatel_oem7_msgs.msg.INSExtendedSolutionStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nov_header.message_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nov_header.message_name = str[start:end]
      _x = self
      start = end
      end += 66
      (_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.latitude_stdev, _x.longitude_stdev, _x.height_stdev, _x.north_velocity_stdev, _x.east_velocity_stdev, _x.up_velocity_stdev, _x.roll_stdev, _x.pitch_stdev, _x.azimuth_stdev, _x.ext_sol_status.status, _x.time_since_last_update, _x.reserved1, _x.reserved2, _x.reserved3,) = _get_struct_HBIBHI9fI2H2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_HBIBHI9fI2H2I = None
def _get_struct_HBIBHI9fI2H2I():
    global _struct_HBIBHI9fI2H2I
    if _struct_HBIBHI9fI2H2I is None:
        _struct_HBIBHI9fI2H2I = struct.Struct("<HBIBHI9fI2H2I")
    return _struct_HBIBHI9fI2H2I
