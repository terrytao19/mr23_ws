# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_oem7_msgs/HEADING2.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import novatel_oem7_msgs.msg
import std_msgs.msg

class HEADING2(genpy.Message):
  _md5sum = "122511c4b985ce1811a5f28a3179643e"
  _type = "novatel_oem7_msgs/HEADING2"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header                      header
Oem7Header                  nov_header
SolutionStatus              sol_status
PositionOrVelocityType      pos_type
float32                     length
float32                     heading
float32                     pitch
float32                     reserved
float32                     heading_stdev
float32                     pitch_stdev
string                      rover_stn_id
string                      master_stn_id
uint8                       num_sv_tracked
uint8                       num_sv_in_sol
uint8                       num_sv_obs
uint8                       num_sv_multi
SolutionSource              sol_source
BestExtendedSolutionStatus  ext_sol_status
uint8                       galileo_beidou_sig_mask
uint8                       gps_glonass_sig_mask





================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: novatel_oem7_msgs/Oem7Header
uint16 OEM7MSGTYPE_LOG =  0


string message_name
uint16 message_id
uint8  message_type
uint32 sequence_number
uint8  time_status
uint16 gps_week_number
uint32 gps_week_milliseconds


================================================================================
MSG: novatel_oem7_msgs/SolutionStatus
uint32 SOL_COMPUTED             = 0
uint32 INSUFFICIENT_OBS         = 1
uint32 NO_CONVERGENCE            = 2
uint32 SINGULARITY              = 3
uint32 COV_TRACE                = 4
uint32 TEST_DIST                = 5
uint32 COLD_START               = 6
uint32 V_H_LIMIT                = 7
uint32 VARIANCE                 = 8
uint32 RESIDUALS                = 9
uint32 INTEGRITY_WARNING        = 13
uint32 PENDING                  = 18
uint32 INVALID_FIX              = 19
uint32 UNAUTHORIZED             = 20
uint32 INVALID_RATE             = 22

uint32 status

================================================================================
MSG: novatel_oem7_msgs/PositionOrVelocityType
uint32 NONE                     = 0
uint32 FIXEDPOS                 = 1
uint32 FIXEDHEIGHT              = 2
uint32 DOPPLER_VELOCITY         = 8
uint32 SINGLE                   = 16
uint32 PSRDIFF                  = 17
uint32 WAAS                     = 18
uint32 PROPAGATED               = 19
uint32 L1_FLOAT                 = 32
uint32 NARROW_FLOAT             = 34
uint32 L1_INT                   = 48
uint32 WIDE_INT                 = 49
uint32 NARROW_INT               = 50
uint32 RTK_DIRECT_INS           = 51
uint32 INS_SBAS                 = 52
uint32 INS_PSRSP                = 53
uint32 INS_PSRDIFF              = 54
uint32 INS_RTKFLOAT             = 55
uint32 INS_RTKFIXED             = 56
uint32 PPP_CONVERGING           = 68
uint32 PPP                      = 69
uint32 OPERATIONAL              = 70
uint32 WARNING                  = 71
uint32 OUT_OF_BOUNDS            = 72
uint32 INS_PPP_CONVERGING       = 73
uint32 INS_PPP                  = 74
uint32 PPP_BASIC_CONVERGING     = 77
uint32 PPP_BASIC                = 78
uint32 INS_PPP_BASIC_CONVERGING = 79
uint32 INS_PPP_BASIC            = 80


uint32 type
================================================================================
MSG: novatel_oem7_msgs/SolutionSource
uint8 RESERVED1           = 3 # 0x3

uint8 SOURCE_ANTENNA_MASK = 12 # 0xC
uint8 PRIMARY_ANTENNA     = 0
uint8 SECONDARY_ANTENNA   = 0 

uint8 RESERVED2           = 240 # 0xF0

uint8 source
================================================================================
MSG: novatel_oem7_msgs/BestExtendedSolutionStatus
# Bit 0
uint8 RTK_SOLUTION_VERIFIED = 1
uint8 PDP_SOLUTION_IS_GLIDE = 1

# Bits 1-3, mask 0xE
uint8 KLOBUCHAR_BROADCAST                =  2 # 0x2 
uint8 SBAS_BROADCAST                     =  4 # 0x4 
uint8 MULTI_FREQUENCY_COMPUTED           =  6 # 0x6
uint8 PSRDIFF_CORRECTION                 =  8 # 0x8
uint8 NOVATEL_BLENDED_IONO_VALUE         = 10 #0xA

# Bit 4
uint8 RTK_ASSIST_ACTIVE = 16 # 0x10

# Bit 5
uint8 ANTENNA_INFORMATION_IS_MISSING = 32 # 0x20

# Bit 6 reserved
uint8 RESERVED = 64 # 0x40

# Bit 7
uint8 POSITION_INCLUDES_TERRAIN_COMPENSATION_CORRECTIONS = 128 # 0x80



uint8 status"""
  __slots__ = ['header','nov_header','sol_status','pos_type','length','heading','pitch','reserved','heading_stdev','pitch_stdev','rover_stn_id','master_stn_id','num_sv_tracked','num_sv_in_sol','num_sv_obs','num_sv_multi','sol_source','ext_sol_status','galileo_beidou_sig_mask','gps_glonass_sig_mask']
  _slot_types = ['std_msgs/Header','novatel_oem7_msgs/Oem7Header','novatel_oem7_msgs/SolutionStatus','novatel_oem7_msgs/PositionOrVelocityType','float32','float32','float32','float32','float32','float32','string','string','uint8','uint8','uint8','uint8','novatel_oem7_msgs/SolutionSource','novatel_oem7_msgs/BestExtendedSolutionStatus','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,nov_header,sol_status,pos_type,length,heading,pitch,reserved,heading_stdev,pitch_stdev,rover_stn_id,master_stn_id,num_sv_tracked,num_sv_in_sol,num_sv_obs,num_sv_multi,sol_source,ext_sol_status,galileo_beidou_sig_mask,gps_glonass_sig_mask

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HEADING2, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      if self.sol_status is None:
        self.sol_status = novatel_oem7_msgs.msg.SolutionStatus()
      if self.pos_type is None:
        self.pos_type = novatel_oem7_msgs.msg.PositionOrVelocityType()
      if self.length is None:
        self.length = 0.
      if self.heading is None:
        self.heading = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.reserved is None:
        self.reserved = 0.
      if self.heading_stdev is None:
        self.heading_stdev = 0.
      if self.pitch_stdev is None:
        self.pitch_stdev = 0.
      if self.rover_stn_id is None:
        self.rover_stn_id = ''
      if self.master_stn_id is None:
        self.master_stn_id = ''
      if self.num_sv_tracked is None:
        self.num_sv_tracked = 0
      if self.num_sv_in_sol is None:
        self.num_sv_in_sol = 0
      if self.num_sv_obs is None:
        self.num_sv_obs = 0
      if self.num_sv_multi is None:
        self.num_sv_multi = 0
      if self.sol_source is None:
        self.sol_source = novatel_oem7_msgs.msg.SolutionSource()
      if self.ext_sol_status is None:
        self.ext_sol_status = novatel_oem7_msgs.msg.BestExtendedSolutionStatus()
      if self.galileo_beidou_sig_mask is None:
        self.galileo_beidou_sig_mask = 0
      if self.gps_glonass_sig_mask is None:
        self.gps_glonass_sig_mask = 0
    else:
      self.header = std_msgs.msg.Header()
      self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      self.sol_status = novatel_oem7_msgs.msg.SolutionStatus()
      self.pos_type = novatel_oem7_msgs.msg.PositionOrVelocityType()
      self.length = 0.
      self.heading = 0.
      self.pitch = 0.
      self.reserved = 0.
      self.heading_stdev = 0.
      self.pitch_stdev = 0.
      self.rover_stn_id = ''
      self.master_stn_id = ''
      self.num_sv_tracked = 0
      self.num_sv_in_sol = 0
      self.num_sv_obs = 0
      self.num_sv_multi = 0
      self.sol_source = novatel_oem7_msgs.msg.SolutionSource()
      self.ext_sol_status = novatel_oem7_msgs.msg.BestExtendedSolutionStatus()
      self.galileo_beidou_sig_mask = 0
      self.gps_glonass_sig_mask = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.nov_header.message_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HBIBH3I6f().pack(_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.sol_status.status, _x.pos_type.type, _x.length, _x.heading, _x.pitch, _x.reserved, _x.heading_stdev, _x.pitch_stdev))
      _x = self.rover_stn_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.master_stn_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8B().pack(_x.num_sv_tracked, _x.num_sv_in_sol, _x.num_sv_obs, _x.num_sv_multi, _x.sol_source.source, _x.ext_sol_status.status, _x.galileo_beidou_sig_mask, _x.gps_glonass_sig_mask))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      if self.sol_status is None:
        self.sol_status = novatel_oem7_msgs.msg.SolutionStatus()
      if self.pos_type is None:
        self.pos_type = novatel_oem7_msgs.msg.PositionOrVelocityType()
      if self.sol_source is None:
        self.sol_source = novatel_oem7_msgs.msg.SolutionSource()
      if self.ext_sol_status is None:
        self.ext_sol_status = novatel_oem7_msgs.msg.BestExtendedSolutionStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nov_header.message_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nov_header.message_name = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.sol_status.status, _x.pos_type.type, _x.length, _x.heading, _x.pitch, _x.reserved, _x.heading_stdev, _x.pitch_stdev,) = _get_struct_HBIBH3I6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rover_stn_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rover_stn_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.master_stn_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.master_stn_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.num_sv_tracked, _x.num_sv_in_sol, _x.num_sv_obs, _x.num_sv_multi, _x.sol_source.source, _x.ext_sol_status.status, _x.galileo_beidou_sig_mask, _x.gps_glonass_sig_mask,) = _get_struct_8B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.nov_header.message_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HBIBH3I6f().pack(_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.sol_status.status, _x.pos_type.type, _x.length, _x.heading, _x.pitch, _x.reserved, _x.heading_stdev, _x.pitch_stdev))
      _x = self.rover_stn_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.master_stn_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_8B().pack(_x.num_sv_tracked, _x.num_sv_in_sol, _x.num_sv_obs, _x.num_sv_multi, _x.sol_source.source, _x.ext_sol_status.status, _x.galileo_beidou_sig_mask, _x.gps_glonass_sig_mask))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      if self.sol_status is None:
        self.sol_status = novatel_oem7_msgs.msg.SolutionStatus()
      if self.pos_type is None:
        self.pos_type = novatel_oem7_msgs.msg.PositionOrVelocityType()
      if self.sol_source is None:
        self.sol_source = novatel_oem7_msgs.msg.SolutionSource()
      if self.ext_sol_status is None:
        self.ext_sol_status = novatel_oem7_msgs.msg.BestExtendedSolutionStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nov_header.message_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nov_header.message_name = str[start:end]
      _x = self
      start = end
      end += 46
      (_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.sol_status.status, _x.pos_type.type, _x.length, _x.heading, _x.pitch, _x.reserved, _x.heading_stdev, _x.pitch_stdev,) = _get_struct_HBIBH3I6f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rover_stn_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rover_stn_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.master_stn_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.master_stn_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.num_sv_tracked, _x.num_sv_in_sol, _x.num_sv_obs, _x.num_sv_multi, _x.sol_source.source, _x.ext_sol_status.status, _x.galileo_beidou_sig_mask, _x.gps_glonass_sig_mask,) = _get_struct_8B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
_struct_HBIBH3I6f = None
def _get_struct_HBIBH3I6f():
    global _struct_HBIBH3I6f
    if _struct_HBIBH3I6f is None:
        _struct_HBIBH3I6f = struct.Struct("<HBIBH3I6f")
    return _struct_HBIBH3I6f
