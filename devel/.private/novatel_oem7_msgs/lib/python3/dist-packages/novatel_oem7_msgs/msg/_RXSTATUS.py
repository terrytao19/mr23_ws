# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_oem7_msgs/RXSTATUS.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import novatel_oem7_msgs.msg
import std_msgs.msg

class RXSTATUS(genpy.Message):
  _md5sum = "51660aad98f709444acfd10dc4fd7fa6"
  _type = "novatel_oem7_msgs/RXSTATUS"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header           header
Oem7Header       nov_header
uint32           error
uint32           num_status_codes
uint32           rxstat
uint32           rxstat_pri_mask
uint32           rxstat_set_mask
uint32           rxstat_clr_mask
uint32           aux1_stat
uint32           aux1_stat_pri
uint32           aux1_stat_set
uint32           aux1_stat_clr
uint32           aux2_stat
uint32           aux2_stat_pri
uint32           aux2_stat_set
uint32           aux2_stat_clr
uint32           aux3_stat
uint32           aux3_stat_pri
uint32           aux3_stat_set
uint32           aux3_stat_clr
uint32           aux4_stat
uint32           aux4_stat_pri
uint32           aux4_stat_set
uint32           aux4_stat_clr
uint8[]          error_bits
string[]         error_strs
uint8[]          rxstat_bits
string[]         rxstat_strs
uint8[]          aux1_stat_bits
string[]         aux1_stat_strs
uint8[]          aux2_stat_bits
string[]         aux2_stat_strs
uint8[]          aux3_stat_bits
string[]         aux3_stat_strs
uint8[]          aux4_stat_bits
string[]         aux4_stat_strs

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: novatel_oem7_msgs/Oem7Header
uint16 OEM7MSGTYPE_LOG =  0


string message_name
uint16 message_id
uint8  message_type
uint32 sequence_number
uint8  time_status
uint16 gps_week_number
uint32 gps_week_milliseconds

"""
  __slots__ = ['header','nov_header','error','num_status_codes','rxstat','rxstat_pri_mask','rxstat_set_mask','rxstat_clr_mask','aux1_stat','aux1_stat_pri','aux1_stat_set','aux1_stat_clr','aux2_stat','aux2_stat_pri','aux2_stat_set','aux2_stat_clr','aux3_stat','aux3_stat_pri','aux3_stat_set','aux3_stat_clr','aux4_stat','aux4_stat_pri','aux4_stat_set','aux4_stat_clr','error_bits','error_strs','rxstat_bits','rxstat_strs','aux1_stat_bits','aux1_stat_strs','aux2_stat_bits','aux2_stat_strs','aux3_stat_bits','aux3_stat_strs','aux4_stat_bits','aux4_stat_strs']
  _slot_types = ['std_msgs/Header','novatel_oem7_msgs/Oem7Header','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint8[]','string[]','uint8[]','string[]','uint8[]','string[]','uint8[]','string[]','uint8[]','string[]','uint8[]','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,nov_header,error,num_status_codes,rxstat,rxstat_pri_mask,rxstat_set_mask,rxstat_clr_mask,aux1_stat,aux1_stat_pri,aux1_stat_set,aux1_stat_clr,aux2_stat,aux2_stat_pri,aux2_stat_set,aux2_stat_clr,aux3_stat,aux3_stat_pri,aux3_stat_set,aux3_stat_clr,aux4_stat,aux4_stat_pri,aux4_stat_set,aux4_stat_clr,error_bits,error_strs,rxstat_bits,rxstat_strs,aux1_stat_bits,aux1_stat_strs,aux2_stat_bits,aux2_stat_strs,aux3_stat_bits,aux3_stat_strs,aux4_stat_bits,aux4_stat_strs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RXSTATUS, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      if self.error is None:
        self.error = 0
      if self.num_status_codes is None:
        self.num_status_codes = 0
      if self.rxstat is None:
        self.rxstat = 0
      if self.rxstat_pri_mask is None:
        self.rxstat_pri_mask = 0
      if self.rxstat_set_mask is None:
        self.rxstat_set_mask = 0
      if self.rxstat_clr_mask is None:
        self.rxstat_clr_mask = 0
      if self.aux1_stat is None:
        self.aux1_stat = 0
      if self.aux1_stat_pri is None:
        self.aux1_stat_pri = 0
      if self.aux1_stat_set is None:
        self.aux1_stat_set = 0
      if self.aux1_stat_clr is None:
        self.aux1_stat_clr = 0
      if self.aux2_stat is None:
        self.aux2_stat = 0
      if self.aux2_stat_pri is None:
        self.aux2_stat_pri = 0
      if self.aux2_stat_set is None:
        self.aux2_stat_set = 0
      if self.aux2_stat_clr is None:
        self.aux2_stat_clr = 0
      if self.aux3_stat is None:
        self.aux3_stat = 0
      if self.aux3_stat_pri is None:
        self.aux3_stat_pri = 0
      if self.aux3_stat_set is None:
        self.aux3_stat_set = 0
      if self.aux3_stat_clr is None:
        self.aux3_stat_clr = 0
      if self.aux4_stat is None:
        self.aux4_stat = 0
      if self.aux4_stat_pri is None:
        self.aux4_stat_pri = 0
      if self.aux4_stat_set is None:
        self.aux4_stat_set = 0
      if self.aux4_stat_clr is None:
        self.aux4_stat_clr = 0
      if self.error_bits is None:
        self.error_bits = b''
      if self.error_strs is None:
        self.error_strs = []
      if self.rxstat_bits is None:
        self.rxstat_bits = b''
      if self.rxstat_strs is None:
        self.rxstat_strs = []
      if self.aux1_stat_bits is None:
        self.aux1_stat_bits = b''
      if self.aux1_stat_strs is None:
        self.aux1_stat_strs = []
      if self.aux2_stat_bits is None:
        self.aux2_stat_bits = b''
      if self.aux2_stat_strs is None:
        self.aux2_stat_strs = []
      if self.aux3_stat_bits is None:
        self.aux3_stat_bits = b''
      if self.aux3_stat_strs is None:
        self.aux3_stat_strs = []
      if self.aux4_stat_bits is None:
        self.aux4_stat_bits = b''
      if self.aux4_stat_strs is None:
        self.aux4_stat_strs = []
    else:
      self.header = std_msgs.msg.Header()
      self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      self.error = 0
      self.num_status_codes = 0
      self.rxstat = 0
      self.rxstat_pri_mask = 0
      self.rxstat_set_mask = 0
      self.rxstat_clr_mask = 0
      self.aux1_stat = 0
      self.aux1_stat_pri = 0
      self.aux1_stat_set = 0
      self.aux1_stat_clr = 0
      self.aux2_stat = 0
      self.aux2_stat_pri = 0
      self.aux2_stat_set = 0
      self.aux2_stat_clr = 0
      self.aux3_stat = 0
      self.aux3_stat_pri = 0
      self.aux3_stat_set = 0
      self.aux3_stat_clr = 0
      self.aux4_stat = 0
      self.aux4_stat_pri = 0
      self.aux4_stat_set = 0
      self.aux4_stat_clr = 0
      self.error_bits = b''
      self.error_strs = []
      self.rxstat_bits = b''
      self.rxstat_strs = []
      self.aux1_stat_bits = b''
      self.aux1_stat_strs = []
      self.aux2_stat_bits = b''
      self.aux2_stat_strs = []
      self.aux3_stat_bits = b''
      self.aux3_stat_strs = []
      self.aux4_stat_bits = b''
      self.aux4_stat_strs = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.nov_header.message_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HBIBH23I().pack(_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.error, _x.num_status_codes, _x.rxstat, _x.rxstat_pri_mask, _x.rxstat_set_mask, _x.rxstat_clr_mask, _x.aux1_stat, _x.aux1_stat_pri, _x.aux1_stat_set, _x.aux1_stat_clr, _x.aux2_stat, _x.aux2_stat_pri, _x.aux2_stat_set, _x.aux2_stat_clr, _x.aux3_stat, _x.aux3_stat_pri, _x.aux3_stat_set, _x.aux3_stat_clr, _x.aux4_stat, _x.aux4_stat_pri, _x.aux4_stat_set, _x.aux4_stat_clr))
      _x = self.error_bits
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.error_strs)
      buff.write(_struct_I.pack(length))
      for val1 in self.error_strs:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.rxstat_bits
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.rxstat_strs)
      buff.write(_struct_I.pack(length))
      for val1 in self.rxstat_strs:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.aux1_stat_bits
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.aux1_stat_strs)
      buff.write(_struct_I.pack(length))
      for val1 in self.aux1_stat_strs:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.aux2_stat_bits
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.aux2_stat_strs)
      buff.write(_struct_I.pack(length))
      for val1 in self.aux2_stat_strs:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.aux3_stat_bits
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.aux3_stat_strs)
      buff.write(_struct_I.pack(length))
      for val1 in self.aux3_stat_strs:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.aux4_stat_bits
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.aux4_stat_strs)
      buff.write(_struct_I.pack(length))
      for val1 in self.aux4_stat_strs:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nov_header.message_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nov_header.message_name = str[start:end]
      _x = self
      start = end
      end += 102
      (_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.error, _x.num_status_codes, _x.rxstat, _x.rxstat_pri_mask, _x.rxstat_set_mask, _x.rxstat_clr_mask, _x.aux1_stat, _x.aux1_stat_pri, _x.aux1_stat_set, _x.aux1_stat_clr, _x.aux2_stat, _x.aux2_stat_pri, _x.aux2_stat_set, _x.aux2_stat_clr, _x.aux3_stat, _x.aux3_stat_pri, _x.aux3_stat_set, _x.aux3_stat_clr, _x.aux4_stat, _x.aux4_stat_pri, _x.aux4_stat_set, _x.aux4_stat_clr,) = _get_struct_HBIBH23I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.error_bits = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.error_strs = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.error_strs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.rxstat_bits = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rxstat_strs = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.rxstat_strs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.aux1_stat_bits = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.aux1_stat_strs = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.aux1_stat_strs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.aux2_stat_bits = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.aux2_stat_strs = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.aux2_stat_strs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.aux3_stat_bits = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.aux3_stat_strs = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.aux3_stat_strs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.aux4_stat_bits = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.aux4_stat_strs = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.aux4_stat_strs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.nov_header.message_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HBIBH23I().pack(_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.error, _x.num_status_codes, _x.rxstat, _x.rxstat_pri_mask, _x.rxstat_set_mask, _x.rxstat_clr_mask, _x.aux1_stat, _x.aux1_stat_pri, _x.aux1_stat_set, _x.aux1_stat_clr, _x.aux2_stat, _x.aux2_stat_pri, _x.aux2_stat_set, _x.aux2_stat_clr, _x.aux3_stat, _x.aux3_stat_pri, _x.aux3_stat_set, _x.aux3_stat_clr, _x.aux4_stat, _x.aux4_stat_pri, _x.aux4_stat_set, _x.aux4_stat_clr))
      _x = self.error_bits
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.error_strs)
      buff.write(_struct_I.pack(length))
      for val1 in self.error_strs:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.rxstat_bits
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.rxstat_strs)
      buff.write(_struct_I.pack(length))
      for val1 in self.rxstat_strs:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.aux1_stat_bits
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.aux1_stat_strs)
      buff.write(_struct_I.pack(length))
      for val1 in self.aux1_stat_strs:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.aux2_stat_bits
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.aux2_stat_strs)
      buff.write(_struct_I.pack(length))
      for val1 in self.aux2_stat_strs:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.aux3_stat_bits
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.aux3_stat_strs)
      buff.write(_struct_I.pack(length))
      for val1 in self.aux3_stat_strs:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.aux4_stat_bits
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.aux4_stat_strs)
      buff.write(_struct_I.pack(length))
      for val1 in self.aux4_stat_strs:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nov_header.message_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nov_header.message_name = str[start:end]
      _x = self
      start = end
      end += 102
      (_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.error, _x.num_status_codes, _x.rxstat, _x.rxstat_pri_mask, _x.rxstat_set_mask, _x.rxstat_clr_mask, _x.aux1_stat, _x.aux1_stat_pri, _x.aux1_stat_set, _x.aux1_stat_clr, _x.aux2_stat, _x.aux2_stat_pri, _x.aux2_stat_set, _x.aux2_stat_clr, _x.aux3_stat, _x.aux3_stat_pri, _x.aux3_stat_set, _x.aux3_stat_clr, _x.aux4_stat, _x.aux4_stat_pri, _x.aux4_stat_set, _x.aux4_stat_clr,) = _get_struct_HBIBH23I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.error_bits = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.error_strs = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.error_strs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.rxstat_bits = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rxstat_strs = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.rxstat_strs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.aux1_stat_bits = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.aux1_stat_strs = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.aux1_stat_strs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.aux2_stat_bits = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.aux2_stat_strs = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.aux2_stat_strs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.aux3_stat_bits = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.aux3_stat_strs = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.aux3_stat_strs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.aux4_stat_bits = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.aux4_stat_strs = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.aux4_stat_strs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_HBIBH23I = None
def _get_struct_HBIBH23I():
    global _struct_HBIBH23I
    if _struct_HBIBH23I is None:
        _struct_HBIBH23I = struct.Struct("<HBIBH23I")
    return _struct_HBIBH23I
