# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_oem7_msgs/INSResetType.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class INSResetType(genpy.Message):
  _md5sum = "0ad3467cbb2454a9268b9cbc97aa39ed"
  _type = "novatel_oem7_msgs/INSResetType"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 INITIALIZED                     = 0
uint8 INS_TIMING_ERROR                = 1
uint8 INVALID_SOLUTION                = 2
uint8 INS_ORIENT_CHANGED              = 3
uint8 INS_USER_COMMAND                = 4
uint8 INS_CALIBRATION                 = 5
uint8 INIT_ATTITUDE_RECEIVED          = 6
uint8 ALIGNMENT_MODE_CHANGED          = 8
uint8 EXPT_RESTRICTS_EXCEEDED         = 9
uint8 DATA_GAP                        = 10
uint8 RECEIVED_IMU_SPECS              = 11
uint8 ACCEL_RESTRICTIONS_EXCEEDED     = 12
uint8 ROTATION_RESTRICTIONS_EXCEEDED  = 13
uint8 RAWIMU_STATUS_INVALID           = 14
uint8 IMU_CONFIGURED                  = 15
uint8 IMU_UNUSPPORTED                 = 16
uint8 INS_SEED_INVALID                = 17
uint8 INS_SEED_VALIDATION_FAILED      = 18
uint8 USER_COMMAND_RESTART            = 19

uint8 type"""
  # Pseudo-constants
  INITIALIZED = 0
  INS_TIMING_ERROR = 1
  INVALID_SOLUTION = 2
  INS_ORIENT_CHANGED = 3
  INS_USER_COMMAND = 4
  INS_CALIBRATION = 5
  INIT_ATTITUDE_RECEIVED = 6
  ALIGNMENT_MODE_CHANGED = 8
  EXPT_RESTRICTS_EXCEEDED = 9
  DATA_GAP = 10
  RECEIVED_IMU_SPECS = 11
  ACCEL_RESTRICTIONS_EXCEEDED = 12
  ROTATION_RESTRICTIONS_EXCEEDED = 13
  RAWIMU_STATUS_INVALID = 14
  IMU_CONFIGURED = 15
  IMU_UNUSPPORTED = 16
  INS_SEED_INVALID = 17
  INS_SEED_VALIDATION_FAILED = 18
  USER_COMMAND_RESTART = 19

  __slots__ = ['type']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(INSResetType, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
    else:
      self.type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.type,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.type,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
