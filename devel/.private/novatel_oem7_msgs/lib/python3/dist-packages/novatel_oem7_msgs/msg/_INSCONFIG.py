# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_oem7_msgs/INSCONFIG.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import novatel_oem7_msgs.msg
import std_msgs.msg

class INSCONFIG(genpy.Message):
  _md5sum = "508dee51cc31e919fdbc53264ea50f71"
  _type = "novatel_oem7_msgs/INSCONFIG"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header              header
Oem7Header          nov_header
uint32              imu_type
uint8               mapping
uint8               initial_alignment_velocity
uint16              heave_window
uint32              profile
uint8[4]            enabled_updates
INSAlignmentMode    alignment_mode
INSOutputFrame	    relative_ins_output_frame
bool                relative_ins_output_direction
INSReceiverStatus   ins_receiver_status
uint8               ins_seed_enabled
uint8               ins_seed_validation
uint16              reserved_1
uint32              reserved_2
uint32              reserved_3
uint32              reserved_4
uint32              reserved_5
uint32              reserved_6
uint32              reserved_7
uint32              number_of_translations
Translation[]       translations
uint32              number_of_rotations
Rotation[]          rotations







         

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: novatel_oem7_msgs/Oem7Header
uint16 OEM7MSGTYPE_LOG =  0


string message_name
uint16 message_id
uint8  message_type
uint32 sequence_number
uint8  time_status
uint16 gps_week_number
uint32 gps_week_milliseconds


================================================================================
MSG: novatel_oem7_msgs/INSAlignmentMode


uint32 UNAIDED          = 0
uint32 AIDED_TRANSFER   = 2
uint32 AUTOMATIC        = 3
uint32 STATIC           = 4
uint32 KINEMATIC        = 5

uint32  mode

================================================================================
MSG: novatel_oem7_msgs/INSOutputFrame

uint32 ROVER            = 1
uint32 MASTER           = 2
uint32 ECEF             = 3
uint32 LOCALEVEL        = 4

uint32 frame
================================================================================
MSG: novatel_oem7_msgs/INSReceiverStatus

uint8 INS_RESET_BYTE = 0
# Refer to INSResetType for values


uint8 BYTE_1 = 1
uint8 IMU_COMMUNICATION_ERROR = 1

# Bytes 3-4 are reserved
uint8[4]         status
================================================================================
MSG: novatel_oem7_msgs/Translation
TranslationOffset           translation
INSFrame                    frame
float32                     x_offset
float32                     y_offset
float32                     z_offset
float32                     x_uncertainty
float32                     y_uncertainty
float32                     z_uncertainty
INSSourceStatus             translation_source
================================================================================
MSG: novatel_oem7_msgs/TranslationOffset
uint32      ANT1        =  1
uint32      ANT2        =  2
uint32      EXTERNAL    =  3
uint32      USER        =  4
uint32      MARK1       =  5
uint32      MARK2       =  6
uint32      GIMBAL      =  7
uint32      MARK3       =  9
uint32      MARK4       = 10

uint32 type

================================================================================
MSG: novatel_oem7_msgs/INSFrame
uint32 IMUBODY = 0
uint32 VEHICLE = 1

uint32 frame
================================================================================
MSG: novatel_oem7_msgs/INSSourceStatus
uint32 FROM_NVM           = 1
uint32 CALIBRATING        = 2
uint32 CALIBRATED         = 3
uint32 FROM_COMMAND       = 4
uint32 RESET              = 5
uint32 FROM_DUAL_ANT      = 6
uint32 INS_CONVERSING     = 7
uint32 INSUFFICIENT_SPEED = 8
uint32 HIGH_ROTATION      = 9

uint32 status
================================================================================
MSG: novatel_oem7_msgs/Rotation
RotationalOffset    rotation
INSFrame            frame
float32             x_rotation
float32             y_rotation
float32             z_rotation
float32             x_rotation_stdev
float32             y_rotation_stdev
float32             z_rotation_stdev
INSSourceStatus     rotation_source
================================================================================
MSG: novatel_oem7_msgs/RotationalOffset
uint32 USER 	=  4
uint32 MARK1 	=  5
uint32 MARK2    =  6
uint32 ALIGN    =  8
uint32 MARK3    =  9
uint32 MARK4    = 10
uint32 RBV      = 11
uint32 RBM      = 12

uint32 offset"""
  __slots__ = ['header','nov_header','imu_type','mapping','initial_alignment_velocity','heave_window','profile','enabled_updates','alignment_mode','relative_ins_output_frame','relative_ins_output_direction','ins_receiver_status','ins_seed_enabled','ins_seed_validation','reserved_1','reserved_2','reserved_3','reserved_4','reserved_5','reserved_6','reserved_7','number_of_translations','translations','number_of_rotations','rotations']
  _slot_types = ['std_msgs/Header','novatel_oem7_msgs/Oem7Header','uint32','uint8','uint8','uint16','uint32','uint8[4]','novatel_oem7_msgs/INSAlignmentMode','novatel_oem7_msgs/INSOutputFrame','bool','novatel_oem7_msgs/INSReceiverStatus','uint8','uint8','uint16','uint32','uint32','uint32','uint32','uint32','uint32','uint32','novatel_oem7_msgs/Translation[]','uint32','novatel_oem7_msgs/Rotation[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,nov_header,imu_type,mapping,initial_alignment_velocity,heave_window,profile,enabled_updates,alignment_mode,relative_ins_output_frame,relative_ins_output_direction,ins_receiver_status,ins_seed_enabled,ins_seed_validation,reserved_1,reserved_2,reserved_3,reserved_4,reserved_5,reserved_6,reserved_7,number_of_translations,translations,number_of_rotations,rotations

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(INSCONFIG, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      if self.imu_type is None:
        self.imu_type = 0
      if self.mapping is None:
        self.mapping = 0
      if self.initial_alignment_velocity is None:
        self.initial_alignment_velocity = 0
      if self.heave_window is None:
        self.heave_window = 0
      if self.profile is None:
        self.profile = 0
      if self.enabled_updates is None:
        self.enabled_updates = b'\0'*4
      if self.alignment_mode is None:
        self.alignment_mode = novatel_oem7_msgs.msg.INSAlignmentMode()
      if self.relative_ins_output_frame is None:
        self.relative_ins_output_frame = novatel_oem7_msgs.msg.INSOutputFrame()
      if self.relative_ins_output_direction is None:
        self.relative_ins_output_direction = False
      if self.ins_receiver_status is None:
        self.ins_receiver_status = novatel_oem7_msgs.msg.INSReceiverStatus()
      if self.ins_seed_enabled is None:
        self.ins_seed_enabled = 0
      if self.ins_seed_validation is None:
        self.ins_seed_validation = 0
      if self.reserved_1 is None:
        self.reserved_1 = 0
      if self.reserved_2 is None:
        self.reserved_2 = 0
      if self.reserved_3 is None:
        self.reserved_3 = 0
      if self.reserved_4 is None:
        self.reserved_4 = 0
      if self.reserved_5 is None:
        self.reserved_5 = 0
      if self.reserved_6 is None:
        self.reserved_6 = 0
      if self.reserved_7 is None:
        self.reserved_7 = 0
      if self.number_of_translations is None:
        self.number_of_translations = 0
      if self.translations is None:
        self.translations = []
      if self.number_of_rotations is None:
        self.number_of_rotations = 0
      if self.rotations is None:
        self.rotations = []
    else:
      self.header = std_msgs.msg.Header()
      self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      self.imu_type = 0
      self.mapping = 0
      self.initial_alignment_velocity = 0
      self.heave_window = 0
      self.profile = 0
      self.enabled_updates = b'\0'*4
      self.alignment_mode = novatel_oem7_msgs.msg.INSAlignmentMode()
      self.relative_ins_output_frame = novatel_oem7_msgs.msg.INSOutputFrame()
      self.relative_ins_output_direction = False
      self.ins_receiver_status = novatel_oem7_msgs.msg.INSReceiverStatus()
      self.ins_seed_enabled = 0
      self.ins_seed_validation = 0
      self.reserved_1 = 0
      self.reserved_2 = 0
      self.reserved_3 = 0
      self.reserved_4 = 0
      self.reserved_5 = 0
      self.reserved_6 = 0
      self.reserved_7 = 0
      self.number_of_translations = 0
      self.translations = []
      self.number_of_rotations = 0
      self.rotations = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.nov_header.message_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HBIBH2I2BHI().pack(_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.imu_type, _x.mapping, _x.initial_alignment_velocity, _x.heave_window, _x.profile))
      _x = self.enabled_updates
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      _x = self
      buff.write(_get_struct_2IB().pack(_x.alignment_mode.mode, _x.relative_ins_output_frame.frame, _x.relative_ins_output_direction))
      _x = self.ins_receiver_status.status
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      _x = self
      buff.write(_get_struct_2BH7I().pack(_x.ins_seed_enabled, _x.ins_seed_validation, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.number_of_translations))
      length = len(self.translations)
      buff.write(_struct_I.pack(length))
      for val1 in self.translations:
        _v1 = val1.translation
        _x = _v1.type
        buff.write(_get_struct_I().pack(_x))
        _v2 = val1.frame
        _x = _v2.frame
        buff.write(_get_struct_I().pack(_x))
        _x = val1
        buff.write(_get_struct_6f().pack(_x.x_offset, _x.y_offset, _x.z_offset, _x.x_uncertainty, _x.y_uncertainty, _x.z_uncertainty))
        _v3 = val1.translation_source
        _x = _v3.status
        buff.write(_get_struct_I().pack(_x))
      _x = self.number_of_rotations
      buff.write(_get_struct_I().pack(_x))
      length = len(self.rotations)
      buff.write(_struct_I.pack(length))
      for val1 in self.rotations:
        _v4 = val1.rotation
        _x = _v4.offset
        buff.write(_get_struct_I().pack(_x))
        _v5 = val1.frame
        _x = _v5.frame
        buff.write(_get_struct_I().pack(_x))
        _x = val1
        buff.write(_get_struct_6f().pack(_x.x_rotation, _x.y_rotation, _x.z_rotation, _x.x_rotation_stdev, _x.y_rotation_stdev, _x.z_rotation_stdev))
        _v6 = val1.rotation_source
        _x = _v6.status
        buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      if self.alignment_mode is None:
        self.alignment_mode = novatel_oem7_msgs.msg.INSAlignmentMode()
      if self.relative_ins_output_frame is None:
        self.relative_ins_output_frame = novatel_oem7_msgs.msg.INSOutputFrame()
      if self.ins_receiver_status is None:
        self.ins_receiver_status = novatel_oem7_msgs.msg.INSReceiverStatus()
      if self.translations is None:
        self.translations = None
      if self.rotations is None:
        self.rotations = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nov_header.message_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nov_header.message_name = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.imu_type, _x.mapping, _x.initial_alignment_velocity, _x.heave_window, _x.profile,) = _get_struct_HBIBH2I2BHI().unpack(str[start:end])
      start = end
      end += 4
      self.enabled_updates = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.alignment_mode.mode, _x.relative_ins_output_frame.frame, _x.relative_ins_output_direction,) = _get_struct_2IB().unpack(str[start:end])
      self.relative_ins_output_direction = bool(self.relative_ins_output_direction)
      start = end
      end += 4
      self.ins_receiver_status.status = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.ins_seed_enabled, _x.ins_seed_validation, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.number_of_translations,) = _get_struct_2BH7I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.translations = []
      for i in range(0, length):
        val1 = novatel_oem7_msgs.msg.Translation()
        _v7 = val1.translation
        start = end
        end += 4
        (_v7.type,) = _get_struct_I().unpack(str[start:end])
        _v8 = val1.frame
        start = end
        end += 4
        (_v8.frame,) = _get_struct_I().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.x_offset, _x.y_offset, _x.z_offset, _x.x_uncertainty, _x.y_uncertainty, _x.z_uncertainty,) = _get_struct_6f().unpack(str[start:end])
        _v9 = val1.translation_source
        start = end
        end += 4
        (_v9.status,) = _get_struct_I().unpack(str[start:end])
        self.translations.append(val1)
      start = end
      end += 4
      (self.number_of_rotations,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rotations = []
      for i in range(0, length):
        val1 = novatel_oem7_msgs.msg.Rotation()
        _v10 = val1.rotation
        start = end
        end += 4
        (_v10.offset,) = _get_struct_I().unpack(str[start:end])
        _v11 = val1.frame
        start = end
        end += 4
        (_v11.frame,) = _get_struct_I().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.x_rotation, _x.y_rotation, _x.z_rotation, _x.x_rotation_stdev, _x.y_rotation_stdev, _x.z_rotation_stdev,) = _get_struct_6f().unpack(str[start:end])
        _v12 = val1.rotation_source
        start = end
        end += 4
        (_v12.status,) = _get_struct_I().unpack(str[start:end])
        self.rotations.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.nov_header.message_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HBIBH2I2BHI().pack(_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.imu_type, _x.mapping, _x.initial_alignment_velocity, _x.heave_window, _x.profile))
      _x = self.enabled_updates
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      _x = self
      buff.write(_get_struct_2IB().pack(_x.alignment_mode.mode, _x.relative_ins_output_frame.frame, _x.relative_ins_output_direction))
      _x = self.ins_receiver_status.status
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_4B().pack(*_x))
      else:
        buff.write(_get_struct_4s().pack(_x))
      _x = self
      buff.write(_get_struct_2BH7I().pack(_x.ins_seed_enabled, _x.ins_seed_validation, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.number_of_translations))
      length = len(self.translations)
      buff.write(_struct_I.pack(length))
      for val1 in self.translations:
        _v13 = val1.translation
        _x = _v13.type
        buff.write(_get_struct_I().pack(_x))
        _v14 = val1.frame
        _x = _v14.frame
        buff.write(_get_struct_I().pack(_x))
        _x = val1
        buff.write(_get_struct_6f().pack(_x.x_offset, _x.y_offset, _x.z_offset, _x.x_uncertainty, _x.y_uncertainty, _x.z_uncertainty))
        _v15 = val1.translation_source
        _x = _v15.status
        buff.write(_get_struct_I().pack(_x))
      _x = self.number_of_rotations
      buff.write(_get_struct_I().pack(_x))
      length = len(self.rotations)
      buff.write(_struct_I.pack(length))
      for val1 in self.rotations:
        _v16 = val1.rotation
        _x = _v16.offset
        buff.write(_get_struct_I().pack(_x))
        _v17 = val1.frame
        _x = _v17.frame
        buff.write(_get_struct_I().pack(_x))
        _x = val1
        buff.write(_get_struct_6f().pack(_x.x_rotation, _x.y_rotation, _x.z_rotation, _x.x_rotation_stdev, _x.y_rotation_stdev, _x.z_rotation_stdev))
        _v18 = val1.rotation_source
        _x = _v18.status
        buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      if self.alignment_mode is None:
        self.alignment_mode = novatel_oem7_msgs.msg.INSAlignmentMode()
      if self.relative_ins_output_frame is None:
        self.relative_ins_output_frame = novatel_oem7_msgs.msg.INSOutputFrame()
      if self.ins_receiver_status is None:
        self.ins_receiver_status = novatel_oem7_msgs.msg.INSReceiverStatus()
      if self.translations is None:
        self.translations = None
      if self.rotations is None:
        self.rotations = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nov_header.message_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nov_header.message_name = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.imu_type, _x.mapping, _x.initial_alignment_velocity, _x.heave_window, _x.profile,) = _get_struct_HBIBH2I2BHI().unpack(str[start:end])
      start = end
      end += 4
      self.enabled_updates = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.alignment_mode.mode, _x.relative_ins_output_frame.frame, _x.relative_ins_output_direction,) = _get_struct_2IB().unpack(str[start:end])
      self.relative_ins_output_direction = bool(self.relative_ins_output_direction)
      start = end
      end += 4
      self.ins_receiver_status.status = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.ins_seed_enabled, _x.ins_seed_validation, _x.reserved_1, _x.reserved_2, _x.reserved_3, _x.reserved_4, _x.reserved_5, _x.reserved_6, _x.reserved_7, _x.number_of_translations,) = _get_struct_2BH7I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.translations = []
      for i in range(0, length):
        val1 = novatel_oem7_msgs.msg.Translation()
        _v19 = val1.translation
        start = end
        end += 4
        (_v19.type,) = _get_struct_I().unpack(str[start:end])
        _v20 = val1.frame
        start = end
        end += 4
        (_v20.frame,) = _get_struct_I().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.x_offset, _x.y_offset, _x.z_offset, _x.x_uncertainty, _x.y_uncertainty, _x.z_uncertainty,) = _get_struct_6f().unpack(str[start:end])
        _v21 = val1.translation_source
        start = end
        end += 4
        (_v21.status,) = _get_struct_I().unpack(str[start:end])
        self.translations.append(val1)
      start = end
      end += 4
      (self.number_of_rotations,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rotations = []
      for i in range(0, length):
        val1 = novatel_oem7_msgs.msg.Rotation()
        _v22 = val1.rotation
        start = end
        end += 4
        (_v22.offset,) = _get_struct_I().unpack(str[start:end])
        _v23 = val1.frame
        start = end
        end += 4
        (_v23.frame,) = _get_struct_I().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.x_rotation, _x.y_rotation, _x.z_rotation, _x.x_rotation_stdev, _x.y_rotation_stdev, _x.z_rotation_stdev,) = _get_struct_6f().unpack(str[start:end])
        _v24 = val1.rotation_source
        start = end
        end += 4
        (_v24.status,) = _get_struct_I().unpack(str[start:end])
        self.rotations.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2BH7I = None
def _get_struct_2BH7I():
    global _struct_2BH7I
    if _struct_2BH7I is None:
        _struct_2BH7I = struct.Struct("<2BH7I")
    return _struct_2BH7I
_struct_2IB = None
def _get_struct_2IB():
    global _struct_2IB
    if _struct_2IB is None:
        _struct_2IB = struct.Struct("<2IB")
    return _struct_2IB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4B = None
def _get_struct_4B():
    global _struct_4B
    if _struct_4B is None:
        _struct_4B = struct.Struct("<4B")
    return _struct_4B
_struct_4s = None
def _get_struct_4s():
    global _struct_4s
    if _struct_4s is None:
        _struct_4s = struct.Struct("<4s")
    return _struct_4s
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
_struct_HBIBH2I2BHI = None
def _get_struct_HBIBH2I2BHI():
    global _struct_HBIBH2I2BHI
    if _struct_HBIBH2I2BHI is None:
        _struct_HBIBH2I2BHI = struct.Struct("<HBIBH2I2BHI")
    return _struct_HBIBH2I2BHI
