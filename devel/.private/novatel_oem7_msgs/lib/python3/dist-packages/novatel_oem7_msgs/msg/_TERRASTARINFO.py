# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_oem7_msgs/TERRASTARINFO.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import novatel_oem7_msgs.msg
import std_msgs.msg

class TERRASTARINFO(genpy.Message):
  _md5sum = "b0de412dfceef754375192573adc2124"
  _type = "novatel_oem7_msgs/TERRASTARINFO"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header                          header
Oem7Header                      nov_header
string                          product_activation_code
SubscriptionType                sub_type
SubscriptionPermission          sub_permission
uint32                          service_end_day_of_year
uint32                          service_end_year
uint32                          reserved
RegionRestriction               region_restriction
float32                         center_point_latitude
float32                         center_point_longitude
uint32                          radius








================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: novatel_oem7_msgs/Oem7Header
uint16 OEM7MSGTYPE_LOG =  0


string message_name
uint16 message_id
uint8  message_type
uint32 sequence_number
uint8  time_status
uint16 gps_week_number
uint32 gps_week_milliseconds


================================================================================
MSG: novatel_oem7_msgs/SubscriptionType
uint32 UNASSIGNED                  = 0
uint32 TERM                        = 1
uint32 MODEL                       = 5
uint32 BUBBLE                      = 100
uint32 INCOMPATIBLE_SUBSCRIPTION   = 104


uint32 type
================================================================================
MSG: novatel_oem7_msgs/SubscriptionPermission
uint32 RESERVED_1                = 511             # 0x000001FF
uint32 TERRASTAR_C_SERVICE       = 512             # 0x00000200
uint32 TERRASTAR_L_SERVICE       = 1024            # 0x00000400
uint32 RTK_ASSIST_SERVICE        = 2048            # 0x00000800
uint32 RTK_ASSIST_PRO_SERVICE    = 4096            # 0x00001000
uint32 TERRASTAR_C_PRO_SERVICE   = 8192            # 0x00002000
uint32 TERRASTAR_X_SERVICE       = 16384           # 0x00004000
uint32 RESERVED_2                = 4294934528      # 0xFFFF8000


uint32 permission
================================================================================
MSG: novatel_oem7_msgs/RegionRestriction
uint32 NONE           = 0
uint32 GEOGATED       = 1
uint32 LOCAL_AREA     = 2
uint32 NEARSHORE      = 3

uint32 restriction"""
  __slots__ = ['header','nov_header','product_activation_code','sub_type','sub_permission','service_end_day_of_year','service_end_year','reserved','region_restriction','center_point_latitude','center_point_longitude','radius']
  _slot_types = ['std_msgs/Header','novatel_oem7_msgs/Oem7Header','string','novatel_oem7_msgs/SubscriptionType','novatel_oem7_msgs/SubscriptionPermission','uint32','uint32','uint32','novatel_oem7_msgs/RegionRestriction','float32','float32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,nov_header,product_activation_code,sub_type,sub_permission,service_end_day_of_year,service_end_year,reserved,region_restriction,center_point_latitude,center_point_longitude,radius

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TERRASTARINFO, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      if self.product_activation_code is None:
        self.product_activation_code = ''
      if self.sub_type is None:
        self.sub_type = novatel_oem7_msgs.msg.SubscriptionType()
      if self.sub_permission is None:
        self.sub_permission = novatel_oem7_msgs.msg.SubscriptionPermission()
      if self.service_end_day_of_year is None:
        self.service_end_day_of_year = 0
      if self.service_end_year is None:
        self.service_end_year = 0
      if self.reserved is None:
        self.reserved = 0
      if self.region_restriction is None:
        self.region_restriction = novatel_oem7_msgs.msg.RegionRestriction()
      if self.center_point_latitude is None:
        self.center_point_latitude = 0.
      if self.center_point_longitude is None:
        self.center_point_longitude = 0.
      if self.radius is None:
        self.radius = 0
    else:
      self.header = std_msgs.msg.Header()
      self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      self.product_activation_code = ''
      self.sub_type = novatel_oem7_msgs.msg.SubscriptionType()
      self.sub_permission = novatel_oem7_msgs.msg.SubscriptionPermission()
      self.service_end_day_of_year = 0
      self.service_end_year = 0
      self.reserved = 0
      self.region_restriction = novatel_oem7_msgs.msg.RegionRestriction()
      self.center_point_latitude = 0.
      self.center_point_longitude = 0.
      self.radius = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.nov_header.message_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HBIBHI().pack(_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds))
      _x = self.product_activation_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6I2fI().pack(_x.sub_type.type, _x.sub_permission.permission, _x.service_end_day_of_year, _x.service_end_year, _x.reserved, _x.region_restriction.restriction, _x.center_point_latitude, _x.center_point_longitude, _x.radius))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      if self.sub_type is None:
        self.sub_type = novatel_oem7_msgs.msg.SubscriptionType()
      if self.sub_permission is None:
        self.sub_permission = novatel_oem7_msgs.msg.SubscriptionPermission()
      if self.region_restriction is None:
        self.region_restriction = novatel_oem7_msgs.msg.RegionRestriction()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nov_header.message_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nov_header.message_name = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds,) = _get_struct_HBIBHI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.product_activation_code = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.product_activation_code = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.sub_type.type, _x.sub_permission.permission, _x.service_end_day_of_year, _x.service_end_year, _x.reserved, _x.region_restriction.restriction, _x.center_point_latitude, _x.center_point_longitude, _x.radius,) = _get_struct_6I2fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.nov_header.message_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HBIBHI().pack(_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds))
      _x = self.product_activation_code
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6I2fI().pack(_x.sub_type.type, _x.sub_permission.permission, _x.service_end_day_of_year, _x.service_end_year, _x.reserved, _x.region_restriction.restriction, _x.center_point_latitude, _x.center_point_longitude, _x.radius))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      if self.sub_type is None:
        self.sub_type = novatel_oem7_msgs.msg.SubscriptionType()
      if self.sub_permission is None:
        self.sub_permission = novatel_oem7_msgs.msg.SubscriptionPermission()
      if self.region_restriction is None:
        self.region_restriction = novatel_oem7_msgs.msg.RegionRestriction()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nov_header.message_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nov_header.message_name = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds,) = _get_struct_HBIBHI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.product_activation_code = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.product_activation_code = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.sub_type.type, _x.sub_permission.permission, _x.service_end_day_of_year, _x.service_end_year, _x.reserved, _x.region_restriction.restriction, _x.center_point_latitude, _x.center_point_longitude, _x.radius,) = _get_struct_6I2fI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6I2fI = None
def _get_struct_6I2fI():
    global _struct_6I2fI
    if _struct_6I2fI is None:
        _struct_6I2fI = struct.Struct("<6I2fI")
    return _struct_6I2fI
_struct_HBIBHI = None
def _get_struct_HBIBHI():
    global _struct_HBIBHI
    if _struct_HBIBHI is None:
        _struct_HBIBHI = struct.Struct("<HBIBHI")
    return _struct_HBIBHI
