# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from novatel_oem7_msgs/BESTVEL.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import novatel_oem7_msgs.msg
import std_msgs.msg

class BESTVEL(genpy.Message):
  _md5sum = "c8fff0c3277c741ffdf64fdac6b85e79"
  _type = "novatel_oem7_msgs/BESTVEL"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header                  header
Oem7Header              nov_header
SolutionStatus          sol_status
PositionOrVelocityType  vel_type
float32                 latency
float32                 diff_age
float64                 hor_speed
float64                 trk_gnd
float64                 ver_speed
float32                 reserved


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: novatel_oem7_msgs/Oem7Header
uint16 OEM7MSGTYPE_LOG =  0


string message_name
uint16 message_id
uint8  message_type
uint32 sequence_number
uint8  time_status
uint16 gps_week_number
uint32 gps_week_milliseconds


================================================================================
MSG: novatel_oem7_msgs/SolutionStatus
uint32 SOL_COMPUTED             = 0
uint32 INSUFFICIENT_OBS         = 1
uint32 NO_CONVERGENCE            = 2
uint32 SINGULARITY              = 3
uint32 COV_TRACE                = 4
uint32 TEST_DIST                = 5
uint32 COLD_START               = 6
uint32 V_H_LIMIT                = 7
uint32 VARIANCE                 = 8
uint32 RESIDUALS                = 9
uint32 INTEGRITY_WARNING        = 13
uint32 PENDING                  = 18
uint32 INVALID_FIX              = 19
uint32 UNAUTHORIZED             = 20
uint32 INVALID_RATE             = 22

uint32 status

================================================================================
MSG: novatel_oem7_msgs/PositionOrVelocityType
uint32 NONE                     = 0
uint32 FIXEDPOS                 = 1
uint32 FIXEDHEIGHT              = 2
uint32 DOPPLER_VELOCITY         = 8
uint32 SINGLE                   = 16
uint32 PSRDIFF                  = 17
uint32 WAAS                     = 18
uint32 PROPAGATED               = 19
uint32 L1_FLOAT                 = 32
uint32 NARROW_FLOAT             = 34
uint32 L1_INT                   = 48
uint32 WIDE_INT                 = 49
uint32 NARROW_INT               = 50
uint32 RTK_DIRECT_INS           = 51
uint32 INS_SBAS                 = 52
uint32 INS_PSRSP                = 53
uint32 INS_PSRDIFF              = 54
uint32 INS_RTKFLOAT             = 55
uint32 INS_RTKFIXED             = 56
uint32 PPP_CONVERGING           = 68
uint32 PPP                      = 69
uint32 OPERATIONAL              = 70
uint32 WARNING                  = 71
uint32 OUT_OF_BOUNDS            = 72
uint32 INS_PPP_CONVERGING       = 73
uint32 INS_PPP                  = 74
uint32 PPP_BASIC_CONVERGING     = 77
uint32 PPP_BASIC                = 78
uint32 INS_PPP_BASIC_CONVERGING = 79
uint32 INS_PPP_BASIC            = 80


uint32 type"""
  __slots__ = ['header','nov_header','sol_status','vel_type','latency','diff_age','hor_speed','trk_gnd','ver_speed','reserved']
  _slot_types = ['std_msgs/Header','novatel_oem7_msgs/Oem7Header','novatel_oem7_msgs/SolutionStatus','novatel_oem7_msgs/PositionOrVelocityType','float32','float32','float64','float64','float64','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,nov_header,sol_status,vel_type,latency,diff_age,hor_speed,trk_gnd,ver_speed,reserved

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BESTVEL, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      if self.sol_status is None:
        self.sol_status = novatel_oem7_msgs.msg.SolutionStatus()
      if self.vel_type is None:
        self.vel_type = novatel_oem7_msgs.msg.PositionOrVelocityType()
      if self.latency is None:
        self.latency = 0.
      if self.diff_age is None:
        self.diff_age = 0.
      if self.hor_speed is None:
        self.hor_speed = 0.
      if self.trk_gnd is None:
        self.trk_gnd = 0.
      if self.ver_speed is None:
        self.ver_speed = 0.
      if self.reserved is None:
        self.reserved = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      self.sol_status = novatel_oem7_msgs.msg.SolutionStatus()
      self.vel_type = novatel_oem7_msgs.msg.PositionOrVelocityType()
      self.latency = 0.
      self.diff_age = 0.
      self.hor_speed = 0.
      self.trk_gnd = 0.
      self.ver_speed = 0.
      self.reserved = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.nov_header.message_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HBIBH3I2f3df().pack(_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.sol_status.status, _x.vel_type.type, _x.latency, _x.diff_age, _x.hor_speed, _x.trk_gnd, _x.ver_speed, _x.reserved))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      if self.sol_status is None:
        self.sol_status = novatel_oem7_msgs.msg.SolutionStatus()
      if self.vel_type is None:
        self.vel_type = novatel_oem7_msgs.msg.PositionOrVelocityType()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nov_header.message_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nov_header.message_name = str[start:end]
      _x = self
      start = end
      end += 58
      (_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.sol_status.status, _x.vel_type.type, _x.latency, _x.diff_age, _x.hor_speed, _x.trk_gnd, _x.ver_speed, _x.reserved,) = _get_struct_HBIBH3I2f3df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.nov_header.message_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HBIBH3I2f3df().pack(_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.sol_status.status, _x.vel_type.type, _x.latency, _x.diff_age, _x.hor_speed, _x.trk_gnd, _x.ver_speed, _x.reserved))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.nov_header is None:
        self.nov_header = novatel_oem7_msgs.msg.Oem7Header()
      if self.sol_status is None:
        self.sol_status = novatel_oem7_msgs.msg.SolutionStatus()
      if self.vel_type is None:
        self.vel_type = novatel_oem7_msgs.msg.PositionOrVelocityType()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nov_header.message_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nov_header.message_name = str[start:end]
      _x = self
      start = end
      end += 58
      (_x.nov_header.message_id, _x.nov_header.message_type, _x.nov_header.sequence_number, _x.nov_header.time_status, _x.nov_header.gps_week_number, _x.nov_header.gps_week_milliseconds, _x.sol_status.status, _x.vel_type.type, _x.latency, _x.diff_age, _x.hor_speed, _x.trk_gnd, _x.ver_speed, _x.reserved,) = _get_struct_HBIBH3I2f3df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_HBIBH3I2f3df = None
def _get_struct_HBIBH3I2f3df():
    global _struct_HBIBH3I2f3df
    if _struct_HBIBH3I2f3df is None:
        _struct_HBIBH3I2f3df = struct.Struct("<HBIBH3I2f3df")
    return _struct_HBIBH3I2f3df
