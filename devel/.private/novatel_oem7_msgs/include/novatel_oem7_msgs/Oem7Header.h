// Generated by gencpp from file novatel_oem7_msgs/Oem7Header.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_OEM7HEADER_H
#define NOVATEL_OEM7_MSGS_MESSAGE_OEM7HEADER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct Oem7Header_
{
  typedef Oem7Header_<ContainerAllocator> Type;

  Oem7Header_()
    : message_name()
    , message_id(0)
    , message_type(0)
    , sequence_number(0)
    , time_status(0)
    , gps_week_number(0)
    , gps_week_milliseconds(0)  {
    }
  Oem7Header_(const ContainerAllocator& _alloc)
    : message_name(_alloc)
    , message_id(0)
    , message_type(0)
    , sequence_number(0)
    , time_status(0)
    , gps_week_number(0)
    , gps_week_milliseconds(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_name_type;
  _message_name_type message_name;

   typedef uint16_t _message_id_type;
  _message_id_type message_id;

   typedef uint8_t _message_type_type;
  _message_type_type message_type;

   typedef uint32_t _sequence_number_type;
  _sequence_number_type sequence_number;

   typedef uint8_t _time_status_type;
  _time_status_type time_status;

   typedef uint16_t _gps_week_number_type;
  _gps_week_number_type gps_week_number;

   typedef uint32_t _gps_week_milliseconds_type;
  _gps_week_milliseconds_type gps_week_milliseconds;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OEM7MSGTYPE_LOG)
  #undef OEM7MSGTYPE_LOG
#endif

  enum {
    OEM7MSGTYPE_LOG = 0u,
  };


  typedef boost::shared_ptr< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> const> ConstPtr;

}; // struct Oem7Header_

typedef ::novatel_oem7_msgs::Oem7Header_<std::allocator<void> > Oem7Header;

typedef boost::shared_ptr< ::novatel_oem7_msgs::Oem7Header > Oem7HeaderPtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::Oem7Header const> Oem7HeaderConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator2> & rhs)
{
  return lhs.message_name == rhs.message_name &&
    lhs.message_id == rhs.message_id &&
    lhs.message_type == rhs.message_type &&
    lhs.sequence_number == rhs.sequence_number &&
    lhs.time_status == rhs.time_status &&
    lhs.gps_week_number == rhs.gps_week_number &&
    lhs.gps_week_milliseconds == rhs.gps_week_milliseconds;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a320f6ec20b84b07bd76a50b4556ef59";
  }

  static const char* value(const ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa320f6ec20b84b07ULL;
  static const uint64_t static_value2 = 0xbd76a50b4556ef59ULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/Oem7Header";
  }

  static const char* value(const ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 OEM7MSGTYPE_LOG =  0\n"
"\n"
"\n"
"string message_name\n"
"uint16 message_id\n"
"uint8  message_type\n"
"uint32 sequence_number\n"
"uint8  time_status\n"
"uint16 gps_week_number\n"
"uint32 gps_week_milliseconds\n"
"\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message_name);
      stream.next(m.message_id);
      stream.next(m.message_type);
      stream.next(m.sequence_number);
      stream.next(m.time_status);
      stream.next(m.gps_week_number);
      stream.next(m.gps_week_milliseconds);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Oem7Header_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator>& v)
  {
    s << indent << "message_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message_name);
    s << indent << "message_id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.message_id);
    s << indent << "message_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.message_type);
    s << indent << "sequence_number: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sequence_number);
    s << indent << "time_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.time_status);
    s << indent << "gps_week_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.gps_week_number);
    s << indent << "gps_week_milliseconds: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.gps_week_milliseconds);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_OEM7HEADER_H
