// Generated by gencpp from file novatel_oem7_msgs/TIME.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_TIME_H
#define NOVATEL_OEM7_MSGS_MESSAGE_TIME_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <novatel_oem7_msgs/Oem7Header.h>

namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct TIME_
{
  typedef TIME_<ContainerAllocator> Type;

  TIME_()
    : header()
    , nov_header()
    , clock_status(0)
    , offset(0.0)
    , offset_std(0.0)
    , utc_offset(0.0)
    , utc_year(0)
    , utc_month(0)
    , utc_day(0)
    , utc_hour(0)
    , utc_min(0)
    , utc_msec(0)
    , utc_status(0)  {
    }
  TIME_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , nov_header(_alloc)
    , clock_status(0)
    , offset(0.0)
    , offset_std(0.0)
    , utc_offset(0.0)
    , utc_year(0)
    , utc_month(0)
    , utc_day(0)
    , utc_hour(0)
    , utc_min(0)
    , utc_msec(0)
    , utc_status(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator>  _nov_header_type;
  _nov_header_type nov_header;

   typedef uint32_t _clock_status_type;
  _clock_status_type clock_status;

   typedef double _offset_type;
  _offset_type offset;

   typedef double _offset_std_type;
  _offset_std_type offset_std;

   typedef double _utc_offset_type;
  _utc_offset_type utc_offset;

   typedef uint32_t _utc_year_type;
  _utc_year_type utc_year;

   typedef uint8_t _utc_month_type;
  _utc_month_type utc_month;

   typedef uint8_t _utc_day_type;
  _utc_day_type utc_day;

   typedef uint8_t _utc_hour_type;
  _utc_hour_type utc_hour;

   typedef uint8_t _utc_min_type;
  _utc_min_type utc_min;

   typedef uint32_t _utc_msec_type;
  _utc_msec_type utc_msec;

   typedef uint32_t _utc_status_type;
  _utc_status_type utc_status;





  typedef boost::shared_ptr< ::novatel_oem7_msgs::TIME_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::TIME_<ContainerAllocator> const> ConstPtr;

}; // struct TIME_

typedef ::novatel_oem7_msgs::TIME_<std::allocator<void> > TIME;

typedef boost::shared_ptr< ::novatel_oem7_msgs::TIME > TIMEPtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::TIME const> TIMEConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::TIME_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::TIME_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::TIME_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::TIME_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.nov_header == rhs.nov_header &&
    lhs.clock_status == rhs.clock_status &&
    lhs.offset == rhs.offset &&
    lhs.offset_std == rhs.offset_std &&
    lhs.utc_offset == rhs.utc_offset &&
    lhs.utc_year == rhs.utc_year &&
    lhs.utc_month == rhs.utc_month &&
    lhs.utc_day == rhs.utc_day &&
    lhs.utc_hour == rhs.utc_hour &&
    lhs.utc_min == rhs.utc_min &&
    lhs.utc_msec == rhs.utc_msec &&
    lhs.utc_status == rhs.utc_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::TIME_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::TIME_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::TIME_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::TIME_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::TIME_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::TIME_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::TIME_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::TIME_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::TIME_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54034bfc54ecd3d2e80c9b8665eb700c";
  }

  static const char* value(const ::novatel_oem7_msgs::TIME_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54034bfc54ecd3d2ULL;
  static const uint64_t static_value2 = 0xe80c9b8665eb700cULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::TIME_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/TIME";
  }

  static const char* value(const ::novatel_oem7_msgs::TIME_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::TIME_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header           header\n"
"Oem7Header       nov_header\n"
"uint32           clock_status\n"
"float64          offset\n"
"float64          offset_std\n"
"float64          utc_offset\n"
"uint32           utc_year\n"
"uint8            utc_month\n"
"uint8            utc_day\n"
"uint8            utc_hour\n"
"uint8            utc_min\n"
"uint32           utc_msec\n"
"uint32           utc_status\n"
"           \n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/Oem7Header\n"
"uint16 OEM7MSGTYPE_LOG =  0\n"
"\n"
"\n"
"string message_name\n"
"uint16 message_id\n"
"uint8  message_type\n"
"uint32 sequence_number\n"
"uint8  time_status\n"
"uint16 gps_week_number\n"
"uint32 gps_week_milliseconds\n"
"\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::TIME_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::TIME_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.nov_header);
      stream.next(m.clock_status);
      stream.next(m.offset);
      stream.next(m.offset_std);
      stream.next(m.utc_offset);
      stream.next(m.utc_year);
      stream.next(m.utc_month);
      stream.next(m.utc_day);
      stream.next(m.utc_hour);
      stream.next(m.utc_min);
      stream.next(m.utc_msec);
      stream.next(m.utc_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TIME_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::TIME_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::TIME_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "nov_header: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> >::stream(s, indent + "  ", v.nov_header);
    s << indent << "clock_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.clock_status);
    s << indent << "offset: ";
    Printer<double>::stream(s, indent + "  ", v.offset);
    s << indent << "offset_std: ";
    Printer<double>::stream(s, indent + "  ", v.offset_std);
    s << indent << "utc_offset: ";
    Printer<double>::stream(s, indent + "  ", v.utc_offset);
    s << indent << "utc_year: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.utc_year);
    s << indent << "utc_month: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.utc_month);
    s << indent << "utc_day: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.utc_day);
    s << indent << "utc_hour: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.utc_hour);
    s << indent << "utc_min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.utc_min);
    s << indent << "utc_msec: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.utc_msec);
    s << indent << "utc_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.utc_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_TIME_H
