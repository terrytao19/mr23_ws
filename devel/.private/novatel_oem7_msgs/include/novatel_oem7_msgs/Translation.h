// Generated by gencpp from file novatel_oem7_msgs/Translation.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_TRANSLATION_H
#define NOVATEL_OEM7_MSGS_MESSAGE_TRANSLATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <novatel_oem7_msgs/TranslationOffset.h>
#include <novatel_oem7_msgs/INSFrame.h>
#include <novatel_oem7_msgs/INSSourceStatus.h>

namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct Translation_
{
  typedef Translation_<ContainerAllocator> Type;

  Translation_()
    : translation()
    , frame()
    , x_offset(0.0)
    , y_offset(0.0)
    , z_offset(0.0)
    , x_uncertainty(0.0)
    , y_uncertainty(0.0)
    , z_uncertainty(0.0)
    , translation_source()  {
    }
  Translation_(const ContainerAllocator& _alloc)
    : translation(_alloc)
    , frame(_alloc)
    , x_offset(0.0)
    , y_offset(0.0)
    , z_offset(0.0)
    , x_uncertainty(0.0)
    , y_uncertainty(0.0)
    , z_uncertainty(0.0)
    , translation_source(_alloc)  {
  (void)_alloc;
    }



   typedef  ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator>  _translation_type;
  _translation_type translation;

   typedef  ::novatel_oem7_msgs::INSFrame_<ContainerAllocator>  _frame_type;
  _frame_type frame;

   typedef float _x_offset_type;
  _x_offset_type x_offset;

   typedef float _y_offset_type;
  _y_offset_type y_offset;

   typedef float _z_offset_type;
  _z_offset_type z_offset;

   typedef float _x_uncertainty_type;
  _x_uncertainty_type x_uncertainty;

   typedef float _y_uncertainty_type;
  _y_uncertainty_type y_uncertainty;

   typedef float _z_uncertainty_type;
  _z_uncertainty_type z_uncertainty;

   typedef  ::novatel_oem7_msgs::INSSourceStatus_<ContainerAllocator>  _translation_source_type;
  _translation_source_type translation_source;





  typedef boost::shared_ptr< ::novatel_oem7_msgs::Translation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::Translation_<ContainerAllocator> const> ConstPtr;

}; // struct Translation_

typedef ::novatel_oem7_msgs::Translation_<std::allocator<void> > Translation;

typedef boost::shared_ptr< ::novatel_oem7_msgs::Translation > TranslationPtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::Translation const> TranslationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::Translation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::Translation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::Translation_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::Translation_<ContainerAllocator2> & rhs)
{
  return lhs.translation == rhs.translation &&
    lhs.frame == rhs.frame &&
    lhs.x_offset == rhs.x_offset &&
    lhs.y_offset == rhs.y_offset &&
    lhs.z_offset == rhs.z_offset &&
    lhs.x_uncertainty == rhs.x_uncertainty &&
    lhs.y_uncertainty == rhs.y_uncertainty &&
    lhs.z_uncertainty == rhs.z_uncertainty &&
    lhs.translation_source == rhs.translation_source;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::Translation_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::Translation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::Translation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::Translation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::Translation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::Translation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::Translation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::Translation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::Translation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34a33c30602027b15fedd37f626423de";
  }

  static const char* value(const ::novatel_oem7_msgs::Translation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34a33c30602027b1ULL;
  static const uint64_t static_value2 = 0x5fedd37f626423deULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::Translation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/Translation";
  }

  static const char* value(const ::novatel_oem7_msgs::Translation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::Translation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "TranslationOffset           translation\n"
"INSFrame                    frame\n"
"float32                     x_offset\n"
"float32                     y_offset\n"
"float32                     z_offset\n"
"float32                     x_uncertainty\n"
"float32                     y_uncertainty\n"
"float32                     z_uncertainty\n"
"INSSourceStatus             translation_source\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/TranslationOffset\n"
"uint32      ANT1        =  1\n"
"uint32      ANT2        =  2\n"
"uint32      EXTERNAL    =  3\n"
"uint32      USER        =  4\n"
"uint32      MARK1       =  5\n"
"uint32      MARK2       =  6\n"
"uint32      GIMBAL      =  7\n"
"uint32      MARK3       =  9\n"
"uint32      MARK4       = 10\n"
"\n"
"uint32 type\n"
"\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/INSFrame\n"
"uint32 IMUBODY = 0\n"
"uint32 VEHICLE = 1\n"
"\n"
"uint32 frame\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/INSSourceStatus\n"
"uint32 FROM_NVM           = 1\n"
"uint32 CALIBRATING        = 2\n"
"uint32 CALIBRATED         = 3\n"
"uint32 FROM_COMMAND       = 4\n"
"uint32 RESET              = 5\n"
"uint32 FROM_DUAL_ANT      = 6\n"
"uint32 INS_CONVERSING     = 7\n"
"uint32 INSUFFICIENT_SPEED = 8\n"
"uint32 HIGH_ROTATION      = 9\n"
"\n"
"uint32 status\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::Translation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::Translation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.translation);
      stream.next(m.frame);
      stream.next(m.x_offset);
      stream.next(m.y_offset);
      stream.next(m.z_offset);
      stream.next(m.x_uncertainty);
      stream.next(m.y_uncertainty);
      stream.next(m.z_uncertainty);
      stream.next(m.translation_source);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Translation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::Translation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::Translation_<ContainerAllocator>& v)
  {
    s << indent << "translation: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator> >::stream(s, indent + "  ", v.translation);
    s << indent << "frame: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> >::stream(s, indent + "  ", v.frame);
    s << indent << "x_offset: ";
    Printer<float>::stream(s, indent + "  ", v.x_offset);
    s << indent << "y_offset: ";
    Printer<float>::stream(s, indent + "  ", v.y_offset);
    s << indent << "z_offset: ";
    Printer<float>::stream(s, indent + "  ", v.z_offset);
    s << indent << "x_uncertainty: ";
    Printer<float>::stream(s, indent + "  ", v.x_uncertainty);
    s << indent << "y_uncertainty: ";
    Printer<float>::stream(s, indent + "  ", v.y_uncertainty);
    s << indent << "z_uncertainty: ";
    Printer<float>::stream(s, indent + "  ", v.z_uncertainty);
    s << indent << "translation_source: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::INSSourceStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.translation_source);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_TRANSLATION_H
