// Generated by gencpp from file novatel_oem7_msgs/SolutionSource.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_SOLUTIONSOURCE_H
#define NOVATEL_OEM7_MSGS_MESSAGE_SOLUTIONSOURCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct SolutionSource_
{
  typedef SolutionSource_<ContainerAllocator> Type;

  SolutionSource_()
    : source(0)  {
    }
  SolutionSource_(const ContainerAllocator& _alloc)
    : source(0)  {
  (void)_alloc;
    }



   typedef uint8_t _source_type;
  _source_type source;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RESERVED1)
  #undef RESERVED1
#endif
#if defined(_WIN32) && defined(SOURCE_ANTENNA_MASK)
  #undef SOURCE_ANTENNA_MASK
#endif
#if defined(_WIN32) && defined(PRIMARY_ANTENNA)
  #undef PRIMARY_ANTENNA
#endif
#if defined(_WIN32) && defined(SECONDARY_ANTENNA)
  #undef SECONDARY_ANTENNA
#endif
#if defined(_WIN32) && defined(RESERVED2)
  #undef RESERVED2
#endif

  enum {
    RESERVED1 = 3u,
    SOURCE_ANTENNA_MASK = 12u,
    PRIMARY_ANTENNA = 0u,
    SECONDARY_ANTENNA = 0u,
    RESERVED2 = 240u,
  };


  typedef boost::shared_ptr< ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator> const> ConstPtr;

}; // struct SolutionSource_

typedef ::novatel_oem7_msgs::SolutionSource_<std::allocator<void> > SolutionSource;

typedef boost::shared_ptr< ::novatel_oem7_msgs::SolutionSource > SolutionSourcePtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::SolutionSource const> SolutionSourceConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator2> & rhs)
{
  return lhs.source == rhs.source;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "120ef33d71161f952ba630868394085a";
  }

  static const char* value(const ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x120ef33d71161f95ULL;
  static const uint64_t static_value2 = 0x2ba630868394085aULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/SolutionSource";
  }

  static const char* value(const ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 RESERVED1           = 3 # 0x3\n"
"\n"
"uint8 SOURCE_ANTENNA_MASK = 12 # 0xC\n"
"uint8 PRIMARY_ANTENNA     = 0\n"
"uint8 SECONDARY_ANTENNA   = 0 \n"
"\n"
"uint8 RESERVED2           = 240 # 0xF0\n"
"\n"
"uint8 source\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.source);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SolutionSource_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::SolutionSource_<ContainerAllocator>& v)
  {
    s << indent << "source: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.source);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_SOLUTIONSOURCE_H
