// Generated by gencpp from file novatel_oem7_msgs/BESTVEL.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_BESTVEL_H
#define NOVATEL_OEM7_MSGS_MESSAGE_BESTVEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <novatel_oem7_msgs/Oem7Header.h>
#include <novatel_oem7_msgs/SolutionStatus.h>
#include <novatel_oem7_msgs/PositionOrVelocityType.h>

namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct BESTVEL_
{
  typedef BESTVEL_<ContainerAllocator> Type;

  BESTVEL_()
    : header()
    , nov_header()
    , sol_status()
    , vel_type()
    , latency(0.0)
    , diff_age(0.0)
    , hor_speed(0.0)
    , trk_gnd(0.0)
    , ver_speed(0.0)
    , reserved(0.0)  {
    }
  BESTVEL_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , nov_header(_alloc)
    , sol_status(_alloc)
    , vel_type(_alloc)
    , latency(0.0)
    , diff_age(0.0)
    , hor_speed(0.0)
    , trk_gnd(0.0)
    , ver_speed(0.0)
    , reserved(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator>  _nov_header_type;
  _nov_header_type nov_header;

   typedef  ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator>  _sol_status_type;
  _sol_status_type sol_status;

   typedef  ::novatel_oem7_msgs::PositionOrVelocityType_<ContainerAllocator>  _vel_type_type;
  _vel_type_type vel_type;

   typedef float _latency_type;
  _latency_type latency;

   typedef float _diff_age_type;
  _diff_age_type diff_age;

   typedef double _hor_speed_type;
  _hor_speed_type hor_speed;

   typedef double _trk_gnd_type;
  _trk_gnd_type trk_gnd;

   typedef double _ver_speed_type;
  _ver_speed_type ver_speed;

   typedef float _reserved_type;
  _reserved_type reserved;





  typedef boost::shared_ptr< ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator> const> ConstPtr;

}; // struct BESTVEL_

typedef ::novatel_oem7_msgs::BESTVEL_<std::allocator<void> > BESTVEL;

typedef boost::shared_ptr< ::novatel_oem7_msgs::BESTVEL > BESTVELPtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::BESTVEL const> BESTVELConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.nov_header == rhs.nov_header &&
    lhs.sol_status == rhs.sol_status &&
    lhs.vel_type == rhs.vel_type &&
    lhs.latency == rhs.latency &&
    lhs.diff_age == rhs.diff_age &&
    lhs.hor_speed == rhs.hor_speed &&
    lhs.trk_gnd == rhs.trk_gnd &&
    lhs.ver_speed == rhs.ver_speed &&
    lhs.reserved == rhs.reserved;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c8fff0c3277c741ffdf64fdac6b85e79";
  }

  static const char* value(const ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc8fff0c3277c741fULL;
  static const uint64_t static_value2 = 0xfdf64fdac6b85e79ULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/BESTVEL";
  }

  static const char* value(const ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header                  header\n"
"Oem7Header              nov_header\n"
"SolutionStatus          sol_status\n"
"PositionOrVelocityType  vel_type\n"
"float32                 latency\n"
"float32                 diff_age\n"
"float64                 hor_speed\n"
"float64                 trk_gnd\n"
"float64                 ver_speed\n"
"float32                 reserved\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/Oem7Header\n"
"uint16 OEM7MSGTYPE_LOG =  0\n"
"\n"
"\n"
"string message_name\n"
"uint16 message_id\n"
"uint8  message_type\n"
"uint32 sequence_number\n"
"uint8  time_status\n"
"uint16 gps_week_number\n"
"uint32 gps_week_milliseconds\n"
"\n"
"\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/SolutionStatus\n"
"uint32 SOL_COMPUTED             = 0\n"
"uint32 INSUFFICIENT_OBS         = 1\n"
"uint32 NO_CONVERGENCE            = 2\n"
"uint32 SINGULARITY              = 3\n"
"uint32 COV_TRACE                = 4\n"
"uint32 TEST_DIST                = 5\n"
"uint32 COLD_START               = 6\n"
"uint32 V_H_LIMIT                = 7\n"
"uint32 VARIANCE                 = 8\n"
"uint32 RESIDUALS                = 9\n"
"uint32 INTEGRITY_WARNING        = 13\n"
"uint32 PENDING                  = 18\n"
"uint32 INVALID_FIX              = 19\n"
"uint32 UNAUTHORIZED             = 20\n"
"uint32 INVALID_RATE             = 22\n"
"\n"
"uint32 status\n"
"\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/PositionOrVelocityType\n"
"uint32 NONE                     = 0\n"
"uint32 FIXEDPOS                 = 1\n"
"uint32 FIXEDHEIGHT              = 2\n"
"uint32 DOPPLER_VELOCITY         = 8\n"
"uint32 SINGLE                   = 16\n"
"uint32 PSRDIFF                  = 17\n"
"uint32 WAAS                     = 18\n"
"uint32 PROPAGATED               = 19\n"
"uint32 L1_FLOAT                 = 32\n"
"uint32 NARROW_FLOAT             = 34\n"
"uint32 L1_INT                   = 48\n"
"uint32 WIDE_INT                 = 49\n"
"uint32 NARROW_INT               = 50\n"
"uint32 RTK_DIRECT_INS           = 51\n"
"uint32 INS_SBAS                 = 52\n"
"uint32 INS_PSRSP                = 53\n"
"uint32 INS_PSRDIFF              = 54\n"
"uint32 INS_RTKFLOAT             = 55\n"
"uint32 INS_RTKFIXED             = 56\n"
"uint32 PPP_CONVERGING           = 68\n"
"uint32 PPP                      = 69\n"
"uint32 OPERATIONAL              = 70\n"
"uint32 WARNING                  = 71\n"
"uint32 OUT_OF_BOUNDS            = 72\n"
"uint32 INS_PPP_CONVERGING       = 73\n"
"uint32 INS_PPP                  = 74\n"
"uint32 PPP_BASIC_CONVERGING     = 77\n"
"uint32 PPP_BASIC                = 78\n"
"uint32 INS_PPP_BASIC_CONVERGING = 79\n"
"uint32 INS_PPP_BASIC            = 80\n"
"\n"
"\n"
"uint32 type\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.nov_header);
      stream.next(m.sol_status);
      stream.next(m.vel_type);
      stream.next(m.latency);
      stream.next(m.diff_age);
      stream.next(m.hor_speed);
      stream.next(m.trk_gnd);
      stream.next(m.ver_speed);
      stream.next(m.reserved);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BESTVEL_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::BESTVEL_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "nov_header: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> >::stream(s, indent + "  ", v.nov_header);
    s << indent << "sol_status: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.sol_status);
    s << indent << "vel_type: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::PositionOrVelocityType_<ContainerAllocator> >::stream(s, indent + "  ", v.vel_type);
    s << indent << "latency: ";
    Printer<float>::stream(s, indent + "  ", v.latency);
    s << indent << "diff_age: ";
    Printer<float>::stream(s, indent + "  ", v.diff_age);
    s << indent << "hor_speed: ";
    Printer<double>::stream(s, indent + "  ", v.hor_speed);
    s << indent << "trk_gnd: ";
    Printer<double>::stream(s, indent + "  ", v.trk_gnd);
    s << indent << "ver_speed: ";
    Printer<double>::stream(s, indent + "  ", v.ver_speed);
    s << indent << "reserved: ";
    Printer<float>::stream(s, indent + "  ", v.reserved);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_BESTVEL_H
