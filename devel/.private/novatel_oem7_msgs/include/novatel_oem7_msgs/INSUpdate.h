// Generated by gencpp from file novatel_oem7_msgs/INSUpdate.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_INSUPDATE_H
#define NOVATEL_OEM7_MSGS_MESSAGE_INSUPDATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct INSUpdate_
{
  typedef INSUpdate_<ContainerAllocator> Type;

  INSUpdate_()
    : update()  {
      update.assign(0);
  }
  INSUpdate_(const ContainerAllocator& _alloc)
    : update()  {
  (void)_alloc;
      update.assign(0);
  }



   typedef boost::array<uint8_t, 4>  _update_type;
  _update_type update;





  typedef boost::shared_ptr< ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator> const> ConstPtr;

}; // struct INSUpdate_

typedef ::novatel_oem7_msgs::INSUpdate_<std::allocator<void> > INSUpdate;

typedef boost::shared_ptr< ::novatel_oem7_msgs::INSUpdate > INSUpdatePtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::INSUpdate const> INSUpdateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator2> & rhs)
{
  return lhs.update == rhs.update;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bb072fed7969dae27946b8a13b3ea62d";
  }

  static const char* value(const ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbb072fed7969dae2ULL;
  static const uint64_t static_value2 = 0x7946b8a13b3ea62dULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/INSUpdate";
  }

  static const char* value(const ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"\n"
"uint8[4]         	update\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.update);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct INSUpdate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::INSUpdate_<ContainerAllocator>& v)
  {
    s << indent << "update[]" << std::endl;
    for (size_t i = 0; i < v.update.size(); ++i)
    {
      s << indent << "  update[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.update[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_INSUPDATE_H
