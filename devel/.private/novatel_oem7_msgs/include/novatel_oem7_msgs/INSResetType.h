// Generated by gencpp from file novatel_oem7_msgs/INSResetType.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_INSRESETTYPE_H
#define NOVATEL_OEM7_MSGS_MESSAGE_INSRESETTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct INSResetType_
{
  typedef INSResetType_<ContainerAllocator> Type;

  INSResetType_()
    : type(0)  {
    }
  INSResetType_(const ContainerAllocator& _alloc)
    : type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INITIALIZED)
  #undef INITIALIZED
#endif
#if defined(_WIN32) && defined(INS_TIMING_ERROR)
  #undef INS_TIMING_ERROR
#endif
#if defined(_WIN32) && defined(INVALID_SOLUTION)
  #undef INVALID_SOLUTION
#endif
#if defined(_WIN32) && defined(INS_ORIENT_CHANGED)
  #undef INS_ORIENT_CHANGED
#endif
#if defined(_WIN32) && defined(INS_USER_COMMAND)
  #undef INS_USER_COMMAND
#endif
#if defined(_WIN32) && defined(INS_CALIBRATION)
  #undef INS_CALIBRATION
#endif
#if defined(_WIN32) && defined(INIT_ATTITUDE_RECEIVED)
  #undef INIT_ATTITUDE_RECEIVED
#endif
#if defined(_WIN32) && defined(ALIGNMENT_MODE_CHANGED)
  #undef ALIGNMENT_MODE_CHANGED
#endif
#if defined(_WIN32) && defined(EXPT_RESTRICTS_EXCEEDED)
  #undef EXPT_RESTRICTS_EXCEEDED
#endif
#if defined(_WIN32) && defined(DATA_GAP)
  #undef DATA_GAP
#endif
#if defined(_WIN32) && defined(RECEIVED_IMU_SPECS)
  #undef RECEIVED_IMU_SPECS
#endif
#if defined(_WIN32) && defined(ACCEL_RESTRICTIONS_EXCEEDED)
  #undef ACCEL_RESTRICTIONS_EXCEEDED
#endif
#if defined(_WIN32) && defined(ROTATION_RESTRICTIONS_EXCEEDED)
  #undef ROTATION_RESTRICTIONS_EXCEEDED
#endif
#if defined(_WIN32) && defined(RAWIMU_STATUS_INVALID)
  #undef RAWIMU_STATUS_INVALID
#endif
#if defined(_WIN32) && defined(IMU_CONFIGURED)
  #undef IMU_CONFIGURED
#endif
#if defined(_WIN32) && defined(IMU_UNUSPPORTED)
  #undef IMU_UNUSPPORTED
#endif
#if defined(_WIN32) && defined(INS_SEED_INVALID)
  #undef INS_SEED_INVALID
#endif
#if defined(_WIN32) && defined(INS_SEED_VALIDATION_FAILED)
  #undef INS_SEED_VALIDATION_FAILED
#endif
#if defined(_WIN32) && defined(USER_COMMAND_RESTART)
  #undef USER_COMMAND_RESTART
#endif

  enum {
    INITIALIZED = 0u,
    INS_TIMING_ERROR = 1u,
    INVALID_SOLUTION = 2u,
    INS_ORIENT_CHANGED = 3u,
    INS_USER_COMMAND = 4u,
    INS_CALIBRATION = 5u,
    INIT_ATTITUDE_RECEIVED = 6u,
    ALIGNMENT_MODE_CHANGED = 8u,
    EXPT_RESTRICTS_EXCEEDED = 9u,
    DATA_GAP = 10u,
    RECEIVED_IMU_SPECS = 11u,
    ACCEL_RESTRICTIONS_EXCEEDED = 12u,
    ROTATION_RESTRICTIONS_EXCEEDED = 13u,
    RAWIMU_STATUS_INVALID = 14u,
    IMU_CONFIGURED = 15u,
    IMU_UNUSPPORTED = 16u,
    INS_SEED_INVALID = 17u,
    INS_SEED_VALIDATION_FAILED = 18u,
    USER_COMMAND_RESTART = 19u,
  };


  typedef boost::shared_ptr< ::novatel_oem7_msgs::INSResetType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::INSResetType_<ContainerAllocator> const> ConstPtr;

}; // struct INSResetType_

typedef ::novatel_oem7_msgs::INSResetType_<std::allocator<void> > INSResetType;

typedef boost::shared_ptr< ::novatel_oem7_msgs::INSResetType > INSResetTypePtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::INSResetType const> INSResetTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::INSResetType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::INSResetType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::INSResetType_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::INSResetType_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::INSResetType_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::INSResetType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::INSResetType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::INSResetType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::INSResetType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::INSResetType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::INSResetType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::INSResetType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::INSResetType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0ad3467cbb2454a9268b9cbc97aa39ed";
  }

  static const char* value(const ::novatel_oem7_msgs::INSResetType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0ad3467cbb2454a9ULL;
  static const uint64_t static_value2 = 0x268b9cbc97aa39edULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::INSResetType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/INSResetType";
  }

  static const char* value(const ::novatel_oem7_msgs::INSResetType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::INSResetType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 INITIALIZED                     = 0\n"
"uint8 INS_TIMING_ERROR                = 1\n"
"uint8 INVALID_SOLUTION                = 2\n"
"uint8 INS_ORIENT_CHANGED              = 3\n"
"uint8 INS_USER_COMMAND                = 4\n"
"uint8 INS_CALIBRATION                 = 5\n"
"uint8 INIT_ATTITUDE_RECEIVED          = 6\n"
"uint8 ALIGNMENT_MODE_CHANGED          = 8\n"
"uint8 EXPT_RESTRICTS_EXCEEDED         = 9\n"
"uint8 DATA_GAP                        = 10\n"
"uint8 RECEIVED_IMU_SPECS              = 11\n"
"uint8 ACCEL_RESTRICTIONS_EXCEEDED     = 12\n"
"uint8 ROTATION_RESTRICTIONS_EXCEEDED  = 13\n"
"uint8 RAWIMU_STATUS_INVALID           = 14\n"
"uint8 IMU_CONFIGURED                  = 15\n"
"uint8 IMU_UNUSPPORTED                 = 16\n"
"uint8 INS_SEED_INVALID                = 17\n"
"uint8 INS_SEED_VALIDATION_FAILED      = 18\n"
"uint8 USER_COMMAND_RESTART            = 19\n"
"\n"
"uint8 type\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::INSResetType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::INSResetType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct INSResetType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::INSResetType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::INSResetType_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_INSRESETTYPE_H
