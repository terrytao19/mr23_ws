// Generated by gencpp from file novatel_oem7_msgs/TranslationOffset.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_TRANSLATIONOFFSET_H
#define NOVATEL_OEM7_MSGS_MESSAGE_TRANSLATIONOFFSET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct TranslationOffset_
{
  typedef TranslationOffset_<ContainerAllocator> Type;

  TranslationOffset_()
    : type(0)  {
    }
  TranslationOffset_(const ContainerAllocator& _alloc)
    : type(0)  {
  (void)_alloc;
    }



   typedef uint32_t _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ANT1)
  #undef ANT1
#endif
#if defined(_WIN32) && defined(ANT2)
  #undef ANT2
#endif
#if defined(_WIN32) && defined(EXTERNAL)
  #undef EXTERNAL
#endif
#if defined(_WIN32) && defined(USER)
  #undef USER
#endif
#if defined(_WIN32) && defined(MARK1)
  #undef MARK1
#endif
#if defined(_WIN32) && defined(MARK2)
  #undef MARK2
#endif
#if defined(_WIN32) && defined(GIMBAL)
  #undef GIMBAL
#endif
#if defined(_WIN32) && defined(MARK3)
  #undef MARK3
#endif
#if defined(_WIN32) && defined(MARK4)
  #undef MARK4
#endif

  enum {
    ANT1 = 1u,
    ANT2 = 2u,
    EXTERNAL = 3u,
    USER = 4u,
    MARK1 = 5u,
    MARK2 = 6u,
    GIMBAL = 7u,
    MARK3 = 9u,
    MARK4 = 10u,
  };


  typedef boost::shared_ptr< ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator> const> ConstPtr;

}; // struct TranslationOffset_

typedef ::novatel_oem7_msgs::TranslationOffset_<std::allocator<void> > TranslationOffset;

typedef boost::shared_ptr< ::novatel_oem7_msgs::TranslationOffset > TranslationOffsetPtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::TranslationOffset const> TranslationOffsetConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0886f61fdf14f9883e5d767c47540d10";
  }

  static const char* value(const ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0886f61fdf14f988ULL;
  static const uint64_t static_value2 = 0x3e5d767c47540d10ULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/TranslationOffset";
  }

  static const char* value(const ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32      ANT1        =  1\n"
"uint32      ANT2        =  2\n"
"uint32      EXTERNAL    =  3\n"
"uint32      USER        =  4\n"
"uint32      MARK1       =  5\n"
"uint32      MARK2       =  6\n"
"uint32      GIMBAL      =  7\n"
"uint32      MARK3       =  9\n"
"uint32      MARK4       = 10\n"
"\n"
"uint32 type\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TranslationOffset_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::TranslationOffset_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_TRANSLATIONOFFSET_H
