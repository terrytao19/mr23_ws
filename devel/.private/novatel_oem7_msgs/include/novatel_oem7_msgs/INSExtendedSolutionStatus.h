// Generated by gencpp from file novatel_oem7_msgs/INSExtendedSolutionStatus.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_INSEXTENDEDSOLUTIONSTATUS_H
#define NOVATEL_OEM7_MSGS_MESSAGE_INSEXTENDEDSOLUTIONSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct INSExtendedSolutionStatus_
{
  typedef INSExtendedSolutionStatus_<ContainerAllocator> Type;

  INSExtendedSolutionStatus_()
    : status(0)  {
    }
  INSExtendedSolutionStatus_(const ContainerAllocator& _alloc)
    : status(0)  {
  (void)_alloc;
    }



   typedef uint32_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(POSITION_UPDATE)
  #undef POSITION_UPDATE
#endif
#if defined(_WIN32) && defined(PHASE_UPDATE)
  #undef PHASE_UPDATE
#endif
#if defined(_WIN32) && defined(ZERO_VELOCITY_UPDATE)
  #undef ZERO_VELOCITY_UPDATE
#endif
#if defined(_WIN32) && defined(WHEEL_SEONSOR_UPDATE)
  #undef WHEEL_SEONSOR_UPDATE
#endif
#if defined(_WIN32) && defined(ALIGN_UPDATE)
  #undef ALIGN_UPDATE
#endif
#if defined(_WIN32) && defined(EXTERNAL_POSITION_UPDATE)
  #undef EXTERNAL_POSITION_UPDATE
#endif
#if defined(_WIN32) && defined(INS_SOLUTIN_CONVERGENCE_FLAG)
  #undef INS_SOLUTIN_CONVERGENCE_FLAG
#endif
#if defined(_WIN32) && defined(DOPPLER_UPDATE)
  #undef DOPPLER_UPDATE
#endif
#if defined(_WIN32) && defined(PSEUDORANGE_UPDATE)
  #undef PSEUDORANGE_UPDATE
#endif
#if defined(_WIN32) && defined(VELOCITY_UPDATE)
  #undef VELOCITY_UPDATE
#endif
#if defined(_WIN32) && defined(RESERVED_1)
  #undef RESERVED_1
#endif
#if defined(_WIN32) && defined(DEAD_RECONING_UPDATE)
  #undef DEAD_RECONING_UPDATE
#endif
#if defined(_WIN32) && defined(PHASE_WIND_UP_UPDATE)
  #undef PHASE_WIND_UP_UPDATE
#endif
#if defined(_WIN32) && defined(COURSE_OVER_GROUND_UPDATE)
  #undef COURSE_OVER_GROUND_UPDATE
#endif
#if defined(_WIN32) && defined(EXTERNAL_VELOCITY_UPDATE)
  #undef EXTERNAL_VELOCITY_UPDATE
#endif
#if defined(_WIN32) && defined(EXTERNAL_ATTITUDE_UPDATE)
  #undef EXTERNAL_ATTITUDE_UPDATE
#endif
#if defined(_WIN32) && defined(EXTERNAL_HEADING_UPDATE)
  #undef EXTERNAL_HEADING_UPDATE
#endif
#if defined(_WIN32) && defined(EXTERNAL_HEIGHT_UPDATE)
  #undef EXTERNAL_HEIGHT_UPDATE
#endif
#if defined(_WIN32) && defined(RESERVED_2)
  #undef RESERVED_2
#endif
#if defined(_WIN32) && defined(RESERVED_3)
  #undef RESERVED_3
#endif
#if defined(_WIN32) && defined(ROVER_POSITION_UPDATE)
  #undef ROVER_POSITION_UPDATE
#endif
#if defined(_WIN32) && defined(ROVER_POSITION_UPDATE_TYPE)
  #undef ROVER_POSITION_UPDATE_TYPE
#endif
#if defined(_WIN32) && defined(RESERVED_4)
  #undef RESERVED_4
#endif
#if defined(_WIN32) && defined(RESERVED_5)
  #undef RESERVED_5
#endif
#if defined(_WIN32) && defined(TURN_ON_BIASES_ESTIMATED)
  #undef TURN_ON_BIASES_ESTIMATED
#endif
#if defined(_WIN32) && defined(ALIGNMENT_DIRECTION_VERIFIED)
  #undef ALIGNMENT_DIRECTION_VERIFIED
#endif
#if defined(_WIN32) && defined(ALIGNMENT_INDICATION_1)
  #undef ALIGNMENT_INDICATION_1
#endif
#if defined(_WIN32) && defined(ALIGNMENT_INDICATION_2)
  #undef ALIGNMENT_INDICATION_2
#endif
#if defined(_WIN32) && defined(ALIGNMENT_INDICATION_3)
  #undef ALIGNMENT_INDICATION_3
#endif
#if defined(_WIN32) && defined(NVM_SEED_INDICATION_1)
  #undef NVM_SEED_INDICATION_1
#endif
#if defined(_WIN32) && defined(NVM_SEED_INDICATION_2)
  #undef NVM_SEED_INDICATION_2
#endif
#if defined(_WIN32) && defined(NVM_SEED_INDICATION_3)
  #undef NVM_SEED_INDICATION_3
#endif
#if defined(_WIN32) && defined(ALIGNMENT_INCOMPLETE_ALIGNMENT)
  #undef ALIGNMENT_INCOMPLETE_ALIGNMENT
#endif
#if defined(_WIN32) && defined(ALIGNMENT_STATIC)
  #undef ALIGNMENT_STATIC
#endif
#if defined(_WIN32) && defined(ALIGNMENT_KINETMATIC)
  #undef ALIGNMENT_KINETMATIC
#endif
#if defined(_WIN32) && defined(ALIGNMENT_DUAL_ANTENNA)
  #undef ALIGNMENT_DUAL_ANTENNA
#endif
#if defined(_WIN32) && defined(ALIGNMENT_USER_COMMAND)
  #undef ALIGNMENT_USER_COMMAND
#endif
#if defined(_WIN32) && defined(ALIGNMENT_NVM_SEED)
  #undef ALIGNMENT_NVM_SEED
#endif
#if defined(_WIN32) && defined(NVM_SEED_INACTIVE)
  #undef NVM_SEED_INACTIVE
#endif
#if defined(_WIN32) && defined(NVM_SEED_STORED_INVALID)
  #undef NVM_SEED_STORED_INVALID
#endif
#if defined(_WIN32) && defined(NVM_SEED_PENDING_VALIDATION)
  #undef NVM_SEED_PENDING_VALIDATION
#endif
#if defined(_WIN32) && defined(NVM_SEED_INJECTED)
  #undef NVM_SEED_INJECTED
#endif
#if defined(_WIN32) && defined(NVM_SEEED_DATA_IGNORED)
  #undef NVM_SEEED_DATA_IGNORED
#endif
#if defined(_WIN32) && defined(NVM_SEED_ERROR_MODEL_DATA_INJECTED)
  #undef NVM_SEED_ERROR_MODEL_DATA_INJECTED
#endif

  enum {
    POSITION_UPDATE = 1u,
    PHASE_UPDATE = 2u,
    ZERO_VELOCITY_UPDATE = 4u,
    WHEEL_SEONSOR_UPDATE = 8u,
    ALIGN_UPDATE = 16u,
    EXTERNAL_POSITION_UPDATE = 32u,
    INS_SOLUTIN_CONVERGENCE_FLAG = 64u,
    DOPPLER_UPDATE = 128u,
    PSEUDORANGE_UPDATE = 256u,
    VELOCITY_UPDATE = 512u,
    RESERVED_1 = 1024u,
    DEAD_RECONING_UPDATE = 2048u,
    PHASE_WIND_UP_UPDATE = 4096u,
    COURSE_OVER_GROUND_UPDATE = 8192u,
    EXTERNAL_VELOCITY_UPDATE = 16384u,
    EXTERNAL_ATTITUDE_UPDATE = 32768u,
    EXTERNAL_HEADING_UPDATE = 65535u,
    EXTERNAL_HEIGHT_UPDATE = 131072u,
    RESERVED_2 = 262144u,
    RESERVED_3 = 524288u,
    ROVER_POSITION_UPDATE = 1048576u,
    ROVER_POSITION_UPDATE_TYPE = 2097152u,
    RESERVED_4 = 4194304u,
    RESERVED_5 = 8388608u,
    TURN_ON_BIASES_ESTIMATED = 16777216u,
    ALIGNMENT_DIRECTION_VERIFIED = 33554432u,
    ALIGNMENT_INDICATION_1 = 67108864u,
    ALIGNMENT_INDICATION_2 = 134217728u,
    ALIGNMENT_INDICATION_3 = 268435456u,
    NVM_SEED_INDICATION_1 = 538870912u,
    NVM_SEED_INDICATION_2 = 1073741824u,
    NVM_SEED_INDICATION_3 = 2147483648u,
    ALIGNMENT_INCOMPLETE_ALIGNMENT = 0u,
    ALIGNMENT_STATIC = 1u,
    ALIGNMENT_KINETMATIC = 2u,
    ALIGNMENT_DUAL_ANTENNA = 3u,
    ALIGNMENT_USER_COMMAND = 4u,
    ALIGNMENT_NVM_SEED = 5u,
    NVM_SEED_INACTIVE = 0u,
    NVM_SEED_STORED_INVALID = 1u,
    NVM_SEED_PENDING_VALIDATION = 2u,
    NVM_SEED_INJECTED = 4u,
    NVM_SEEED_DATA_IGNORED = 5u,
    NVM_SEED_ERROR_MODEL_DATA_INJECTED = 6u,
  };


  typedef boost::shared_ptr< ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator> const> ConstPtr;

}; // struct INSExtendedSolutionStatus_

typedef ::novatel_oem7_msgs::INSExtendedSolutionStatus_<std::allocator<void> > INSExtendedSolutionStatus;

typedef boost::shared_ptr< ::novatel_oem7_msgs::INSExtendedSolutionStatus > INSExtendedSolutionStatusPtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::INSExtendedSolutionStatus const> INSExtendedSolutionStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b17dd280f688dd5271d90452fd0d741c";
  }

  static const char* value(const ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb17dd280f688dd52ULL;
  static const uint64_t static_value2 = 0x71d90452fd0d741cULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/INSExtendedSolutionStatus";
  }

  static const char* value(const ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"uint32 POSITION_UPDATE              = 1             # 0x00000001\n"
"uint32 PHASE_UPDATE                 = 2             # 0x00000002\n"
"uint32 ZERO_VELOCITY_UPDATE         = 4             # 0x00000004\n"
"uint32 WHEEL_SEONSOR_UPDATE         = 8             # 0x00000008\n"
"uint32 ALIGN_UPDATE                 = 16            # 0x00000010\n"
"uint32 EXTERNAL_POSITION_UPDATE     = 32            # 0x00000020\n"
"uint32 INS_SOLUTIN_CONVERGENCE_FLAG = 64            # 0x00000040\n"
"uint32 DOPPLER_UPDATE               = 128           # 0x00000080\n"
"uint32 PSEUDORANGE_UPDATE           = 256           # 0x00000100\n"
"uint32 VELOCITY_UPDATE              = 512           # 0x00000200\n"
"uint32 RESERVED_1                   = 1024          # 0x00000400\n"
"uint32 DEAD_RECONING_UPDATE         = 2048          # 0x00000800\n"
"uint32 PHASE_WIND_UP_UPDATE         = 4096          # 0x00001000\n"
"uint32 COURSE_OVER_GROUND_UPDATE    = 8192          # 0x00002000\n"
"uint32 EXTERNAL_VELOCITY_UPDATE     = 16384         # 0x00004000\n"
"uint32 EXTERNAL_ATTITUDE_UPDATE     = 32768         # 0x00008000\n"
"uint32 EXTERNAL_HEADING_UPDATE      = 65535         # 0x00010000\n"
"uint32 EXTERNAL_HEIGHT_UPDATE       = 131072        # 0x00020000\n"
"uint32 RESERVED_2                   = 262144        # 0x00040000\n"
"uint32 RESERVED_3                   = 524288        # 0x00080000\n"
"uint32 ROVER_POSITION_UPDATE        = 1048576       # 0x00100000\n"
"uint32 ROVER_POSITION_UPDATE_TYPE   = 2097152       # 0x00200000\n"
"\n"
"uint32 RESERVED_4                   = 4194304       # 0x00400000\n"
"uint32 RESERVED_5                   = 8388608       # 0x00800000\n"
"uint32 TURN_ON_BIASES_ESTIMATED     = 16777216      # 0x01000000\n"
"uint32 ALIGNMENT_DIRECTION_VERIFIED = 33554432      # 0x02000000\n"
"uint32 ALIGNMENT_INDICATION_1       = 67108864      # 0x04000000\n"
"uint32 ALIGNMENT_INDICATION_2       = 134217728     # 0x08000000\n"
"uint32 ALIGNMENT_INDICATION_3       = 268435456     # 0x10000000\n"
"uint32 NVM_SEED_INDICATION_1        = 538870912     # 0x20000000\n"
"uint32 NVM_SEED_INDICATION_2        = 1073741824    # 0x40000000\n"
"uint32 NVM_SEED_INDICATION_3        = 2147483648    # 0x80000000\n"
"\n"
"\n"
"\n"
"# Alignment indication\n"
"uint32 ALIGNMENT_INCOMPLETE_ALIGNMENT = 0\n"
"uint32 ALIGNMENT_STATIC               = 1\n"
"uint32 ALIGNMENT_KINETMATIC           = 2\n"
"uint32 ALIGNMENT_DUAL_ANTENNA         = 3\n"
"uint32 ALIGNMENT_USER_COMMAND         = 4\n"
"uint32 ALIGNMENT_NVM_SEED             = 5\n"
"\n"
"# NVM Seed Indication\n"
"uint32 NVM_SEED_INACTIVE                          = 0\n"
"uint32 NVM_SEED_STORED_INVALID                    = 1\n"
"uint32 NVM_SEED_PENDING_VALIDATION                = 2\n"
"uint32 NVM_SEED_INJECTED                          = 4\n"
"uint32 NVM_SEEED_DATA_IGNORED                     = 5\n"
"uint32 NVM_SEED_ERROR_MODEL_DATA_INJECTED         = 6\n"
"\n"
"\n"
"\n"
"uint32 status\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct INSExtendedSolutionStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::INSExtendedSolutionStatus_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_INSEXTENDEDSOLUTIONSTATUS_H
