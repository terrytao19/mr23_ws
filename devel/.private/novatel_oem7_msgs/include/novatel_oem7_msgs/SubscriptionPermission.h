// Generated by gencpp from file novatel_oem7_msgs/SubscriptionPermission.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_SUBSCRIPTIONPERMISSION_H
#define NOVATEL_OEM7_MSGS_MESSAGE_SUBSCRIPTIONPERMISSION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct SubscriptionPermission_
{
  typedef SubscriptionPermission_<ContainerAllocator> Type;

  SubscriptionPermission_()
    : permission(0)  {
    }
  SubscriptionPermission_(const ContainerAllocator& _alloc)
    : permission(0)  {
  (void)_alloc;
    }



   typedef uint32_t _permission_type;
  _permission_type permission;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RESERVED_1)
  #undef RESERVED_1
#endif
#if defined(_WIN32) && defined(TERRASTAR_C_SERVICE)
  #undef TERRASTAR_C_SERVICE
#endif
#if defined(_WIN32) && defined(TERRASTAR_L_SERVICE)
  #undef TERRASTAR_L_SERVICE
#endif
#if defined(_WIN32) && defined(RTK_ASSIST_SERVICE)
  #undef RTK_ASSIST_SERVICE
#endif
#if defined(_WIN32) && defined(RTK_ASSIST_PRO_SERVICE)
  #undef RTK_ASSIST_PRO_SERVICE
#endif
#if defined(_WIN32) && defined(TERRASTAR_C_PRO_SERVICE)
  #undef TERRASTAR_C_PRO_SERVICE
#endif
#if defined(_WIN32) && defined(TERRASTAR_X_SERVICE)
  #undef TERRASTAR_X_SERVICE
#endif
#if defined(_WIN32) && defined(RESERVED_2)
  #undef RESERVED_2
#endif

  enum {
    RESERVED_1 = 511u,
    TERRASTAR_C_SERVICE = 512u,
    TERRASTAR_L_SERVICE = 1024u,
    RTK_ASSIST_SERVICE = 2048u,
    RTK_ASSIST_PRO_SERVICE = 4096u,
    TERRASTAR_C_PRO_SERVICE = 8192u,
    TERRASTAR_X_SERVICE = 16384u,
    RESERVED_2 = 4294934528u,
  };


  typedef boost::shared_ptr< ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator> const> ConstPtr;

}; // struct SubscriptionPermission_

typedef ::novatel_oem7_msgs::SubscriptionPermission_<std::allocator<void> > SubscriptionPermission;

typedef boost::shared_ptr< ::novatel_oem7_msgs::SubscriptionPermission > SubscriptionPermissionPtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::SubscriptionPermission const> SubscriptionPermissionConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator2> & rhs)
{
  return lhs.permission == rhs.permission;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26a38946e2a0a7f998387e8bc02b6d0c";
  }

  static const char* value(const ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26a38946e2a0a7f9ULL;
  static const uint64_t static_value2 = 0x98387e8bc02b6d0cULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/SubscriptionPermission";
  }

  static const char* value(const ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 RESERVED_1                = 511             # 0x000001FF\n"
"uint32 TERRASTAR_C_SERVICE       = 512             # 0x00000200\n"
"uint32 TERRASTAR_L_SERVICE       = 1024            # 0x00000400\n"
"uint32 RTK_ASSIST_SERVICE        = 2048            # 0x00000800\n"
"uint32 RTK_ASSIST_PRO_SERVICE    = 4096            # 0x00001000\n"
"uint32 TERRASTAR_C_PRO_SERVICE   = 8192            # 0x00002000\n"
"uint32 TERRASTAR_X_SERVICE       = 16384           # 0x00004000\n"
"uint32 RESERVED_2                = 4294934528      # 0xFFFF8000\n"
"\n"
"\n"
"uint32 permission\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.permission);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SubscriptionPermission_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator>& v)
  {
    s << indent << "permission: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.permission);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_SUBSCRIPTIONPERMISSION_H
