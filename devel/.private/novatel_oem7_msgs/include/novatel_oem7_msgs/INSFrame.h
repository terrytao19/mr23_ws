// Generated by gencpp from file novatel_oem7_msgs/INSFrame.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_INSFRAME_H
#define NOVATEL_OEM7_MSGS_MESSAGE_INSFRAME_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct INSFrame_
{
  typedef INSFrame_<ContainerAllocator> Type;

  INSFrame_()
    : frame(0)  {
    }
  INSFrame_(const ContainerAllocator& _alloc)
    : frame(0)  {
  (void)_alloc;
    }



   typedef uint32_t _frame_type;
  _frame_type frame;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(IMUBODY)
  #undef IMUBODY
#endif
#if defined(_WIN32) && defined(VEHICLE)
  #undef VEHICLE
#endif

  enum {
    IMUBODY = 0u,
    VEHICLE = 1u,
  };


  typedef boost::shared_ptr< ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> const> ConstPtr;

}; // struct INSFrame_

typedef ::novatel_oem7_msgs::INSFrame_<std::allocator<void> > INSFrame;

typedef boost::shared_ptr< ::novatel_oem7_msgs::INSFrame > INSFramePtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::INSFrame const> INSFrameConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::INSFrame_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::INSFrame_<ContainerAllocator2> & rhs)
{
  return lhs.frame == rhs.frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::INSFrame_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::INSFrame_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1a8e15970b76295bd4919a25ac33208";
  }

  static const char* value(const ::novatel_oem7_msgs::INSFrame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1a8e15970b76295ULL;
  static const uint64_t static_value2 = 0xbd4919a25ac33208ULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/INSFrame";
  }

  static const char* value(const ::novatel_oem7_msgs::INSFrame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 IMUBODY = 0\n"
"uint32 VEHICLE = 1\n"
"\n"
"uint32 frame\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::INSFrame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct INSFrame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::INSFrame_<ContainerAllocator>& v)
  {
    s << indent << "frame: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_INSFRAME_H
