// Generated by gencpp from file novatel_oem7_msgs/Rotation.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_ROTATION_H
#define NOVATEL_OEM7_MSGS_MESSAGE_ROTATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <novatel_oem7_msgs/RotationalOffset.h>
#include <novatel_oem7_msgs/INSFrame.h>
#include <novatel_oem7_msgs/INSSourceStatus.h>

namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct Rotation_
{
  typedef Rotation_<ContainerAllocator> Type;

  Rotation_()
    : rotation()
    , frame()
    , x_rotation(0.0)
    , y_rotation(0.0)
    , z_rotation(0.0)
    , x_rotation_stdev(0.0)
    , y_rotation_stdev(0.0)
    , z_rotation_stdev(0.0)
    , rotation_source()  {
    }
  Rotation_(const ContainerAllocator& _alloc)
    : rotation(_alloc)
    , frame(_alloc)
    , x_rotation(0.0)
    , y_rotation(0.0)
    , z_rotation(0.0)
    , x_rotation_stdev(0.0)
    , y_rotation_stdev(0.0)
    , z_rotation_stdev(0.0)
    , rotation_source(_alloc)  {
  (void)_alloc;
    }



   typedef  ::novatel_oem7_msgs::RotationalOffset_<ContainerAllocator>  _rotation_type;
  _rotation_type rotation;

   typedef  ::novatel_oem7_msgs::INSFrame_<ContainerAllocator>  _frame_type;
  _frame_type frame;

   typedef float _x_rotation_type;
  _x_rotation_type x_rotation;

   typedef float _y_rotation_type;
  _y_rotation_type y_rotation;

   typedef float _z_rotation_type;
  _z_rotation_type z_rotation;

   typedef float _x_rotation_stdev_type;
  _x_rotation_stdev_type x_rotation_stdev;

   typedef float _y_rotation_stdev_type;
  _y_rotation_stdev_type y_rotation_stdev;

   typedef float _z_rotation_stdev_type;
  _z_rotation_stdev_type z_rotation_stdev;

   typedef  ::novatel_oem7_msgs::INSSourceStatus_<ContainerAllocator>  _rotation_source_type;
  _rotation_source_type rotation_source;





  typedef boost::shared_ptr< ::novatel_oem7_msgs::Rotation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::Rotation_<ContainerAllocator> const> ConstPtr;

}; // struct Rotation_

typedef ::novatel_oem7_msgs::Rotation_<std::allocator<void> > Rotation;

typedef boost::shared_ptr< ::novatel_oem7_msgs::Rotation > RotationPtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::Rotation const> RotationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::Rotation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::Rotation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::Rotation_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::Rotation_<ContainerAllocator2> & rhs)
{
  return lhs.rotation == rhs.rotation &&
    lhs.frame == rhs.frame &&
    lhs.x_rotation == rhs.x_rotation &&
    lhs.y_rotation == rhs.y_rotation &&
    lhs.z_rotation == rhs.z_rotation &&
    lhs.x_rotation_stdev == rhs.x_rotation_stdev &&
    lhs.y_rotation_stdev == rhs.y_rotation_stdev &&
    lhs.z_rotation_stdev == rhs.z_rotation_stdev &&
    lhs.rotation_source == rhs.rotation_source;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::Rotation_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::Rotation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::Rotation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::Rotation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::Rotation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::Rotation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::Rotation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::Rotation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::Rotation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d5326fc395098838339ff2dec1eb5cd5";
  }

  static const char* value(const ::novatel_oem7_msgs::Rotation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd5326fc395098838ULL;
  static const uint64_t static_value2 = 0x339ff2dec1eb5cd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::Rotation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/Rotation";
  }

  static const char* value(const ::novatel_oem7_msgs::Rotation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::Rotation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RotationalOffset    rotation\n"
"INSFrame            frame\n"
"float32             x_rotation\n"
"float32             y_rotation\n"
"float32             z_rotation\n"
"float32             x_rotation_stdev\n"
"float32             y_rotation_stdev\n"
"float32             z_rotation_stdev\n"
"INSSourceStatus     rotation_source\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/RotationalOffset\n"
"uint32 USER 	=  4\n"
"uint32 MARK1 	=  5\n"
"uint32 MARK2    =  6\n"
"uint32 ALIGN    =  8\n"
"uint32 MARK3    =  9\n"
"uint32 MARK4    = 10\n"
"uint32 RBV      = 11\n"
"uint32 RBM      = 12\n"
"\n"
"uint32 offset\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/INSFrame\n"
"uint32 IMUBODY = 0\n"
"uint32 VEHICLE = 1\n"
"\n"
"uint32 frame\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/INSSourceStatus\n"
"uint32 FROM_NVM           = 1\n"
"uint32 CALIBRATING        = 2\n"
"uint32 CALIBRATED         = 3\n"
"uint32 FROM_COMMAND       = 4\n"
"uint32 RESET              = 5\n"
"uint32 FROM_DUAL_ANT      = 6\n"
"uint32 INS_CONVERSING     = 7\n"
"uint32 INSUFFICIENT_SPEED = 8\n"
"uint32 HIGH_ROTATION      = 9\n"
"\n"
"uint32 status\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::Rotation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::Rotation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rotation);
      stream.next(m.frame);
      stream.next(m.x_rotation);
      stream.next(m.y_rotation);
      stream.next(m.z_rotation);
      stream.next(m.x_rotation_stdev);
      stream.next(m.y_rotation_stdev);
      stream.next(m.z_rotation_stdev);
      stream.next(m.rotation_source);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Rotation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::Rotation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::Rotation_<ContainerAllocator>& v)
  {
    s << indent << "rotation: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::RotationalOffset_<ContainerAllocator> >::stream(s, indent + "  ", v.rotation);
    s << indent << "frame: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::INSFrame_<ContainerAllocator> >::stream(s, indent + "  ", v.frame);
    s << indent << "x_rotation: ";
    Printer<float>::stream(s, indent + "  ", v.x_rotation);
    s << indent << "y_rotation: ";
    Printer<float>::stream(s, indent + "  ", v.y_rotation);
    s << indent << "z_rotation: ";
    Printer<float>::stream(s, indent + "  ", v.z_rotation);
    s << indent << "x_rotation_stdev: ";
    Printer<float>::stream(s, indent + "  ", v.x_rotation_stdev);
    s << indent << "y_rotation_stdev: ";
    Printer<float>::stream(s, indent + "  ", v.y_rotation_stdev);
    s << indent << "z_rotation_stdev: ";
    Printer<float>::stream(s, indent + "  ", v.z_rotation_stdev);
    s << indent << "rotation_source: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::INSSourceStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.rotation_source);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_ROTATION_H
