// Generated by gencpp from file novatel_oem7_msgs/SyncState.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_SYNCSTATE_H
#define NOVATEL_OEM7_MSGS_MESSAGE_SYNCSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct SyncState_
{
  typedef SyncState_<ContainerAllocator> Type;

  SyncState_()
    : state(0)  {
    }
  SyncState_(const ContainerAllocator& _alloc)
    : state(0)  {
  (void)_alloc;
    }



   typedef uint32_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NO_SIGNAL)
  #undef NO_SIGNAL
#endif
#if defined(_WIN32) && defined(SEARCH)
  #undef SEARCH
#endif
#if defined(_WIN32) && defined(LOCKED)
  #undef LOCKED
#endif

  enum {
    NO_SIGNAL = 0u,
    SEARCH = 1u,
    LOCKED = 2u,
  };


  typedef boost::shared_ptr< ::novatel_oem7_msgs::SyncState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::SyncState_<ContainerAllocator> const> ConstPtr;

}; // struct SyncState_

typedef ::novatel_oem7_msgs::SyncState_<std::allocator<void> > SyncState;

typedef boost::shared_ptr< ::novatel_oem7_msgs::SyncState > SyncStatePtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::SyncState const> SyncStateConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::SyncState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::SyncState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::SyncState_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::SyncState_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::SyncState_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::SyncState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::SyncState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::SyncState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::SyncState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::SyncState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::SyncState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::SyncState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::SyncState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7ec1e476cc4a283ebd8d5407a10b696";
  }

  static const char* value(const ::novatel_oem7_msgs::SyncState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7ec1e476cc4a283ULL;
  static const uint64_t static_value2 = 0xebd8d5407a10b696ULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::SyncState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/SyncState";
  }

  static const char* value(const ::novatel_oem7_msgs::SyncState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::SyncState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 NO_SIGNAL  = 0\n"
"uint32 SEARCH     = 1\n"
"uint32 LOCKED     = 2\n"
"\n"
"\n"
"uint32 state\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::SyncState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::SyncState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SyncState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::SyncState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::SyncState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_SYNCSTATE_H
