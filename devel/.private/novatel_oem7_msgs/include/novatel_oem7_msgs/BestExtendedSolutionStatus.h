// Generated by gencpp from file novatel_oem7_msgs/BestExtendedSolutionStatus.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_BESTEXTENDEDSOLUTIONSTATUS_H
#define NOVATEL_OEM7_MSGS_MESSAGE_BESTEXTENDEDSOLUTIONSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct BestExtendedSolutionStatus_
{
  typedef BestExtendedSolutionStatus_<ContainerAllocator> Type;

  BestExtendedSolutionStatus_()
    : status(0)  {
    }
  BestExtendedSolutionStatus_(const ContainerAllocator& _alloc)
    : status(0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RTK_SOLUTION_VERIFIED)
  #undef RTK_SOLUTION_VERIFIED
#endif
#if defined(_WIN32) && defined(PDP_SOLUTION_IS_GLIDE)
  #undef PDP_SOLUTION_IS_GLIDE
#endif
#if defined(_WIN32) && defined(KLOBUCHAR_BROADCAST)
  #undef KLOBUCHAR_BROADCAST
#endif
#if defined(_WIN32) && defined(SBAS_BROADCAST)
  #undef SBAS_BROADCAST
#endif
#if defined(_WIN32) && defined(MULTI_FREQUENCY_COMPUTED)
  #undef MULTI_FREQUENCY_COMPUTED
#endif
#if defined(_WIN32) && defined(PSRDIFF_CORRECTION)
  #undef PSRDIFF_CORRECTION
#endif
#if defined(_WIN32) && defined(NOVATEL_BLENDED_IONO_VALUE)
  #undef NOVATEL_BLENDED_IONO_VALUE
#endif
#if defined(_WIN32) && defined(RTK_ASSIST_ACTIVE)
  #undef RTK_ASSIST_ACTIVE
#endif
#if defined(_WIN32) && defined(ANTENNA_INFORMATION_IS_MISSING)
  #undef ANTENNA_INFORMATION_IS_MISSING
#endif
#if defined(_WIN32) && defined(RESERVED)
  #undef RESERVED
#endif
#if defined(_WIN32) && defined(POSITION_INCLUDES_TERRAIN_COMPENSATION_CORRECTIONS)
  #undef POSITION_INCLUDES_TERRAIN_COMPENSATION_CORRECTIONS
#endif

  enum {
    RTK_SOLUTION_VERIFIED = 1u,
    PDP_SOLUTION_IS_GLIDE = 1u,
    KLOBUCHAR_BROADCAST = 2u,
    SBAS_BROADCAST = 4u,
    MULTI_FREQUENCY_COMPUTED = 6u,
    PSRDIFF_CORRECTION = 8u,
    NOVATEL_BLENDED_IONO_VALUE = 10u,
    RTK_ASSIST_ACTIVE = 16u,
    ANTENNA_INFORMATION_IS_MISSING = 32u,
    RESERVED = 64u,
    POSITION_INCLUDES_TERRAIN_COMPENSATION_CORRECTIONS = 128u,
  };


  typedef boost::shared_ptr< ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator> const> ConstPtr;

}; // struct BestExtendedSolutionStatus_

typedef ::novatel_oem7_msgs::BestExtendedSolutionStatus_<std::allocator<void> > BestExtendedSolutionStatus;

typedef boost::shared_ptr< ::novatel_oem7_msgs::BestExtendedSolutionStatus > BestExtendedSolutionStatusPtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::BestExtendedSolutionStatus const> BestExtendedSolutionStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2753545b3f433f9b12e96e9549e1973e";
  }

  static const char* value(const ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2753545b3f433f9bULL;
  static const uint64_t static_value2 = 0x12e96e9549e1973eULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/BestExtendedSolutionStatus";
  }

  static const char* value(const ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Bit 0\n"
"uint8 RTK_SOLUTION_VERIFIED = 1\n"
"uint8 PDP_SOLUTION_IS_GLIDE = 1\n"
"\n"
"# Bits 1-3, mask 0xE\n"
"uint8 KLOBUCHAR_BROADCAST                =  2 # 0x2 \n"
"uint8 SBAS_BROADCAST                     =  4 # 0x4 \n"
"uint8 MULTI_FREQUENCY_COMPUTED           =  6 # 0x6\n"
"uint8 PSRDIFF_CORRECTION                 =  8 # 0x8\n"
"uint8 NOVATEL_BLENDED_IONO_VALUE         = 10 #0xA\n"
"\n"
"# Bit 4\n"
"uint8 RTK_ASSIST_ACTIVE = 16 # 0x10\n"
"\n"
"# Bit 5\n"
"uint8 ANTENNA_INFORMATION_IS_MISSING = 32 # 0x20\n"
"\n"
"# Bit 6 reserved\n"
"uint8 RESERVED = 64 # 0x40\n"
"\n"
"# Bit 7\n"
"uint8 POSITION_INCLUDES_TERRAIN_COMPENSATION_CORRECTIONS = 128 # 0x80\n"
"\n"
"\n"
"\n"
"uint8 status\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BestExtendedSolutionStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::BestExtendedSolutionStatus_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_BESTEXTENDEDSOLUTIONSTATUS_H
