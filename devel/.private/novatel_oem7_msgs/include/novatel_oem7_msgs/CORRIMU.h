// Generated by gencpp from file novatel_oem7_msgs/CORRIMU.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_CORRIMU_H
#define NOVATEL_OEM7_MSGS_MESSAGE_CORRIMU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <novatel_oem7_msgs/Oem7Header.h>

namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct CORRIMU_
{
  typedef CORRIMU_<ContainerAllocator> Type;

  CORRIMU_()
    : header()
    , nov_header()
    , imu_data_count(0)
    , pitch_rate(0.0)
    , roll_rate(0.0)
    , yaw_rate(0.0)
    , lateral_acc(0.0)
    , longitudinal_acc(0.0)
    , vertical_acc(0.0)
    , reserved1(0)
    , reserved2(0)  {
    }
  CORRIMU_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , nov_header(_alloc)
    , imu_data_count(0)
    , pitch_rate(0.0)
    , roll_rate(0.0)
    , yaw_rate(0.0)
    , lateral_acc(0.0)
    , longitudinal_acc(0.0)
    , vertical_acc(0.0)
    , reserved1(0)
    , reserved2(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator>  _nov_header_type;
  _nov_header_type nov_header;

   typedef uint32_t _imu_data_count_type;
  _imu_data_count_type imu_data_count;

   typedef double _pitch_rate_type;
  _pitch_rate_type pitch_rate;

   typedef double _roll_rate_type;
  _roll_rate_type roll_rate;

   typedef double _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef double _lateral_acc_type;
  _lateral_acc_type lateral_acc;

   typedef double _longitudinal_acc_type;
  _longitudinal_acc_type longitudinal_acc;

   typedef double _vertical_acc_type;
  _vertical_acc_type vertical_acc;

   typedef uint32_t _reserved1_type;
  _reserved1_type reserved1;

   typedef uint32_t _reserved2_type;
  _reserved2_type reserved2;





  typedef boost::shared_ptr< ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator> const> ConstPtr;

}; // struct CORRIMU_

typedef ::novatel_oem7_msgs::CORRIMU_<std::allocator<void> > CORRIMU;

typedef boost::shared_ptr< ::novatel_oem7_msgs::CORRIMU > CORRIMUPtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::CORRIMU const> CORRIMUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.nov_header == rhs.nov_header &&
    lhs.imu_data_count == rhs.imu_data_count &&
    lhs.pitch_rate == rhs.pitch_rate &&
    lhs.roll_rate == rhs.roll_rate &&
    lhs.yaw_rate == rhs.yaw_rate &&
    lhs.lateral_acc == rhs.lateral_acc &&
    lhs.longitudinal_acc == rhs.longitudinal_acc &&
    lhs.vertical_acc == rhs.vertical_acc &&
    lhs.reserved1 == rhs.reserved1 &&
    lhs.reserved2 == rhs.reserved2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c369b6c76ff4244e122a1e15992e928b";
  }

  static const char* value(const ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc369b6c76ff4244eULL;
  static const uint64_t static_value2 = 0x122a1e15992e928bULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/CORRIMU";
  }

  static const char* value(const ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header           header\n"
"Oem7Header       nov_header\n"
"uint32           imu_data_count\n"
"float64          pitch_rate\n"
"float64          roll_rate\n"
"float64          yaw_rate\n"
"float64          lateral_acc\n"
"float64          longitudinal_acc\n"
"float64          vertical_acc\n"
"uint32           reserved1\n"
"uint32           reserved2\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/Oem7Header\n"
"uint16 OEM7MSGTYPE_LOG =  0\n"
"\n"
"\n"
"string message_name\n"
"uint16 message_id\n"
"uint8  message_type\n"
"uint32 sequence_number\n"
"uint8  time_status\n"
"uint16 gps_week_number\n"
"uint32 gps_week_milliseconds\n"
"\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.nov_header);
      stream.next(m.imu_data_count);
      stream.next(m.pitch_rate);
      stream.next(m.roll_rate);
      stream.next(m.yaw_rate);
      stream.next(m.lateral_acc);
      stream.next(m.longitudinal_acc);
      stream.next(m.vertical_acc);
      stream.next(m.reserved1);
      stream.next(m.reserved2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CORRIMU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::CORRIMU_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "nov_header: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> >::stream(s, indent + "  ", v.nov_header);
    s << indent << "imu_data_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.imu_data_count);
    s << indent << "pitch_rate: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_rate);
    s << indent << "roll_rate: ";
    Printer<double>::stream(s, indent + "  ", v.roll_rate);
    s << indent << "yaw_rate: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "lateral_acc: ";
    Printer<double>::stream(s, indent + "  ", v.lateral_acc);
    s << indent << "longitudinal_acc: ";
    Printer<double>::stream(s, indent + "  ", v.longitudinal_acc);
    s << indent << "vertical_acc: ";
    Printer<double>::stream(s, indent + "  ", v.vertical_acc);
    s << indent << "reserved1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.reserved1);
    s << indent << "reserved2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.reserved2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_CORRIMU_H
