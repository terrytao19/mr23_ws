// Generated by gencpp from file novatel_oem7_msgs/RXSTATUS.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_RXSTATUS_H
#define NOVATEL_OEM7_MSGS_MESSAGE_RXSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <novatel_oem7_msgs/Oem7Header.h>

namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct RXSTATUS_
{
  typedef RXSTATUS_<ContainerAllocator> Type;

  RXSTATUS_()
    : header()
    , nov_header()
    , error(0)
    , num_status_codes(0)
    , rxstat(0)
    , rxstat_pri_mask(0)
    , rxstat_set_mask(0)
    , rxstat_clr_mask(0)
    , aux1_stat(0)
    , aux1_stat_pri(0)
    , aux1_stat_set(0)
    , aux1_stat_clr(0)
    , aux2_stat(0)
    , aux2_stat_pri(0)
    , aux2_stat_set(0)
    , aux2_stat_clr(0)
    , aux3_stat(0)
    , aux3_stat_pri(0)
    , aux3_stat_set(0)
    , aux3_stat_clr(0)
    , aux4_stat(0)
    , aux4_stat_pri(0)
    , aux4_stat_set(0)
    , aux4_stat_clr(0)
    , error_bits()
    , error_strs()
    , rxstat_bits()
    , rxstat_strs()
    , aux1_stat_bits()
    , aux1_stat_strs()
    , aux2_stat_bits()
    , aux2_stat_strs()
    , aux3_stat_bits()
    , aux3_stat_strs()
    , aux4_stat_bits()
    , aux4_stat_strs()  {
    }
  RXSTATUS_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , nov_header(_alloc)
    , error(0)
    , num_status_codes(0)
    , rxstat(0)
    , rxstat_pri_mask(0)
    , rxstat_set_mask(0)
    , rxstat_clr_mask(0)
    , aux1_stat(0)
    , aux1_stat_pri(0)
    , aux1_stat_set(0)
    , aux1_stat_clr(0)
    , aux2_stat(0)
    , aux2_stat_pri(0)
    , aux2_stat_set(0)
    , aux2_stat_clr(0)
    , aux3_stat(0)
    , aux3_stat_pri(0)
    , aux3_stat_set(0)
    , aux3_stat_clr(0)
    , aux4_stat(0)
    , aux4_stat_pri(0)
    , aux4_stat_set(0)
    , aux4_stat_clr(0)
    , error_bits(_alloc)
    , error_strs(_alloc)
    , rxstat_bits(_alloc)
    , rxstat_strs(_alloc)
    , aux1_stat_bits(_alloc)
    , aux1_stat_strs(_alloc)
    , aux2_stat_bits(_alloc)
    , aux2_stat_strs(_alloc)
    , aux3_stat_bits(_alloc)
    , aux3_stat_strs(_alloc)
    , aux4_stat_bits(_alloc)
    , aux4_stat_strs(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator>  _nov_header_type;
  _nov_header_type nov_header;

   typedef uint32_t _error_type;
  _error_type error;

   typedef uint32_t _num_status_codes_type;
  _num_status_codes_type num_status_codes;

   typedef uint32_t _rxstat_type;
  _rxstat_type rxstat;

   typedef uint32_t _rxstat_pri_mask_type;
  _rxstat_pri_mask_type rxstat_pri_mask;

   typedef uint32_t _rxstat_set_mask_type;
  _rxstat_set_mask_type rxstat_set_mask;

   typedef uint32_t _rxstat_clr_mask_type;
  _rxstat_clr_mask_type rxstat_clr_mask;

   typedef uint32_t _aux1_stat_type;
  _aux1_stat_type aux1_stat;

   typedef uint32_t _aux1_stat_pri_type;
  _aux1_stat_pri_type aux1_stat_pri;

   typedef uint32_t _aux1_stat_set_type;
  _aux1_stat_set_type aux1_stat_set;

   typedef uint32_t _aux1_stat_clr_type;
  _aux1_stat_clr_type aux1_stat_clr;

   typedef uint32_t _aux2_stat_type;
  _aux2_stat_type aux2_stat;

   typedef uint32_t _aux2_stat_pri_type;
  _aux2_stat_pri_type aux2_stat_pri;

   typedef uint32_t _aux2_stat_set_type;
  _aux2_stat_set_type aux2_stat_set;

   typedef uint32_t _aux2_stat_clr_type;
  _aux2_stat_clr_type aux2_stat_clr;

   typedef uint32_t _aux3_stat_type;
  _aux3_stat_type aux3_stat;

   typedef uint32_t _aux3_stat_pri_type;
  _aux3_stat_pri_type aux3_stat_pri;

   typedef uint32_t _aux3_stat_set_type;
  _aux3_stat_set_type aux3_stat_set;

   typedef uint32_t _aux3_stat_clr_type;
  _aux3_stat_clr_type aux3_stat_clr;

   typedef uint32_t _aux4_stat_type;
  _aux4_stat_type aux4_stat;

   typedef uint32_t _aux4_stat_pri_type;
  _aux4_stat_pri_type aux4_stat_pri;

   typedef uint32_t _aux4_stat_set_type;
  _aux4_stat_set_type aux4_stat_set;

   typedef uint32_t _aux4_stat_clr_type;
  _aux4_stat_clr_type aux4_stat_clr;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _error_bits_type;
  _error_bits_type error_bits;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _error_strs_type;
  _error_strs_type error_strs;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _rxstat_bits_type;
  _rxstat_bits_type rxstat_bits;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _rxstat_strs_type;
  _rxstat_strs_type rxstat_strs;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _aux1_stat_bits_type;
  _aux1_stat_bits_type aux1_stat_bits;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _aux1_stat_strs_type;
  _aux1_stat_strs_type aux1_stat_strs;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _aux2_stat_bits_type;
  _aux2_stat_bits_type aux2_stat_bits;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _aux2_stat_strs_type;
  _aux2_stat_strs_type aux2_stat_strs;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _aux3_stat_bits_type;
  _aux3_stat_bits_type aux3_stat_bits;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _aux3_stat_strs_type;
  _aux3_stat_strs_type aux3_stat_strs;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _aux4_stat_bits_type;
  _aux4_stat_bits_type aux4_stat_bits;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _aux4_stat_strs_type;
  _aux4_stat_strs_type aux4_stat_strs;





  typedef boost::shared_ptr< ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator> const> ConstPtr;

}; // struct RXSTATUS_

typedef ::novatel_oem7_msgs::RXSTATUS_<std::allocator<void> > RXSTATUS;

typedef boost::shared_ptr< ::novatel_oem7_msgs::RXSTATUS > RXSTATUSPtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::RXSTATUS const> RXSTATUSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.nov_header == rhs.nov_header &&
    lhs.error == rhs.error &&
    lhs.num_status_codes == rhs.num_status_codes &&
    lhs.rxstat == rhs.rxstat &&
    lhs.rxstat_pri_mask == rhs.rxstat_pri_mask &&
    lhs.rxstat_set_mask == rhs.rxstat_set_mask &&
    lhs.rxstat_clr_mask == rhs.rxstat_clr_mask &&
    lhs.aux1_stat == rhs.aux1_stat &&
    lhs.aux1_stat_pri == rhs.aux1_stat_pri &&
    lhs.aux1_stat_set == rhs.aux1_stat_set &&
    lhs.aux1_stat_clr == rhs.aux1_stat_clr &&
    lhs.aux2_stat == rhs.aux2_stat &&
    lhs.aux2_stat_pri == rhs.aux2_stat_pri &&
    lhs.aux2_stat_set == rhs.aux2_stat_set &&
    lhs.aux2_stat_clr == rhs.aux2_stat_clr &&
    lhs.aux3_stat == rhs.aux3_stat &&
    lhs.aux3_stat_pri == rhs.aux3_stat_pri &&
    lhs.aux3_stat_set == rhs.aux3_stat_set &&
    lhs.aux3_stat_clr == rhs.aux3_stat_clr &&
    lhs.aux4_stat == rhs.aux4_stat &&
    lhs.aux4_stat_pri == rhs.aux4_stat_pri &&
    lhs.aux4_stat_set == rhs.aux4_stat_set &&
    lhs.aux4_stat_clr == rhs.aux4_stat_clr &&
    lhs.error_bits == rhs.error_bits &&
    lhs.error_strs == rhs.error_strs &&
    lhs.rxstat_bits == rhs.rxstat_bits &&
    lhs.rxstat_strs == rhs.rxstat_strs &&
    lhs.aux1_stat_bits == rhs.aux1_stat_bits &&
    lhs.aux1_stat_strs == rhs.aux1_stat_strs &&
    lhs.aux2_stat_bits == rhs.aux2_stat_bits &&
    lhs.aux2_stat_strs == rhs.aux2_stat_strs &&
    lhs.aux3_stat_bits == rhs.aux3_stat_bits &&
    lhs.aux3_stat_strs == rhs.aux3_stat_strs &&
    lhs.aux4_stat_bits == rhs.aux4_stat_bits &&
    lhs.aux4_stat_strs == rhs.aux4_stat_strs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51660aad98f709444acfd10dc4fd7fa6";
  }

  static const char* value(const ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51660aad98f70944ULL;
  static const uint64_t static_value2 = 0x4acfd10dc4fd7fa6ULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/RXSTATUS";
  }

  static const char* value(const ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header           header\n"
"Oem7Header       nov_header\n"
"uint32           error\n"
"uint32           num_status_codes\n"
"uint32           rxstat\n"
"uint32           rxstat_pri_mask\n"
"uint32           rxstat_set_mask\n"
"uint32           rxstat_clr_mask\n"
"uint32           aux1_stat\n"
"uint32           aux1_stat_pri\n"
"uint32           aux1_stat_set\n"
"uint32           aux1_stat_clr\n"
"uint32           aux2_stat\n"
"uint32           aux2_stat_pri\n"
"uint32           aux2_stat_set\n"
"uint32           aux2_stat_clr\n"
"uint32           aux3_stat\n"
"uint32           aux3_stat_pri\n"
"uint32           aux3_stat_set\n"
"uint32           aux3_stat_clr\n"
"uint32           aux4_stat\n"
"uint32           aux4_stat_pri\n"
"uint32           aux4_stat_set\n"
"uint32           aux4_stat_clr\n"
"uint8[]          error_bits\n"
"string[]         error_strs\n"
"uint8[]          rxstat_bits\n"
"string[]         rxstat_strs\n"
"uint8[]          aux1_stat_bits\n"
"string[]         aux1_stat_strs\n"
"uint8[]          aux2_stat_bits\n"
"string[]         aux2_stat_strs\n"
"uint8[]          aux3_stat_bits\n"
"string[]         aux3_stat_strs\n"
"uint8[]          aux4_stat_bits\n"
"string[]         aux4_stat_strs\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/Oem7Header\n"
"uint16 OEM7MSGTYPE_LOG =  0\n"
"\n"
"\n"
"string message_name\n"
"uint16 message_id\n"
"uint8  message_type\n"
"uint32 sequence_number\n"
"uint8  time_status\n"
"uint16 gps_week_number\n"
"uint32 gps_week_milliseconds\n"
"\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.nov_header);
      stream.next(m.error);
      stream.next(m.num_status_codes);
      stream.next(m.rxstat);
      stream.next(m.rxstat_pri_mask);
      stream.next(m.rxstat_set_mask);
      stream.next(m.rxstat_clr_mask);
      stream.next(m.aux1_stat);
      stream.next(m.aux1_stat_pri);
      stream.next(m.aux1_stat_set);
      stream.next(m.aux1_stat_clr);
      stream.next(m.aux2_stat);
      stream.next(m.aux2_stat_pri);
      stream.next(m.aux2_stat_set);
      stream.next(m.aux2_stat_clr);
      stream.next(m.aux3_stat);
      stream.next(m.aux3_stat_pri);
      stream.next(m.aux3_stat_set);
      stream.next(m.aux3_stat_clr);
      stream.next(m.aux4_stat);
      stream.next(m.aux4_stat_pri);
      stream.next(m.aux4_stat_set);
      stream.next(m.aux4_stat_clr);
      stream.next(m.error_bits);
      stream.next(m.error_strs);
      stream.next(m.rxstat_bits);
      stream.next(m.rxstat_strs);
      stream.next(m.aux1_stat_bits);
      stream.next(m.aux1_stat_strs);
      stream.next(m.aux2_stat_bits);
      stream.next(m.aux2_stat_strs);
      stream.next(m.aux3_stat_bits);
      stream.next(m.aux3_stat_strs);
      stream.next(m.aux4_stat_bits);
      stream.next(m.aux4_stat_strs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RXSTATUS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::RXSTATUS_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "nov_header: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> >::stream(s, indent + "  ", v.nov_header);
    s << indent << "error: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.error);
    s << indent << "num_status_codes: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_status_codes);
    s << indent << "rxstat: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rxstat);
    s << indent << "rxstat_pri_mask: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rxstat_pri_mask);
    s << indent << "rxstat_set_mask: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rxstat_set_mask);
    s << indent << "rxstat_clr_mask: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rxstat_clr_mask);
    s << indent << "aux1_stat: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.aux1_stat);
    s << indent << "aux1_stat_pri: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.aux1_stat_pri);
    s << indent << "aux1_stat_set: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.aux1_stat_set);
    s << indent << "aux1_stat_clr: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.aux1_stat_clr);
    s << indent << "aux2_stat: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.aux2_stat);
    s << indent << "aux2_stat_pri: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.aux2_stat_pri);
    s << indent << "aux2_stat_set: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.aux2_stat_set);
    s << indent << "aux2_stat_clr: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.aux2_stat_clr);
    s << indent << "aux3_stat: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.aux3_stat);
    s << indent << "aux3_stat_pri: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.aux3_stat_pri);
    s << indent << "aux3_stat_set: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.aux3_stat_set);
    s << indent << "aux3_stat_clr: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.aux3_stat_clr);
    s << indent << "aux4_stat: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.aux4_stat);
    s << indent << "aux4_stat_pri: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.aux4_stat_pri);
    s << indent << "aux4_stat_set: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.aux4_stat_set);
    s << indent << "aux4_stat_clr: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.aux4_stat_clr);
    s << indent << "error_bits[]" << std::endl;
    for (size_t i = 0; i < v.error_bits.size(); ++i)
    {
      s << indent << "  error_bits[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.error_bits[i]);
    }
    s << indent << "error_strs[]" << std::endl;
    for (size_t i = 0; i < v.error_strs.size(); ++i)
    {
      s << indent << "  error_strs[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.error_strs[i]);
    }
    s << indent << "rxstat_bits[]" << std::endl;
    for (size_t i = 0; i < v.rxstat_bits.size(); ++i)
    {
      s << indent << "  rxstat_bits[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.rxstat_bits[i]);
    }
    s << indent << "rxstat_strs[]" << std::endl;
    for (size_t i = 0; i < v.rxstat_strs.size(); ++i)
    {
      s << indent << "  rxstat_strs[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.rxstat_strs[i]);
    }
    s << indent << "aux1_stat_bits[]" << std::endl;
    for (size_t i = 0; i < v.aux1_stat_bits.size(); ++i)
    {
      s << indent << "  aux1_stat_bits[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.aux1_stat_bits[i]);
    }
    s << indent << "aux1_stat_strs[]" << std::endl;
    for (size_t i = 0; i < v.aux1_stat_strs.size(); ++i)
    {
      s << indent << "  aux1_stat_strs[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.aux1_stat_strs[i]);
    }
    s << indent << "aux2_stat_bits[]" << std::endl;
    for (size_t i = 0; i < v.aux2_stat_bits.size(); ++i)
    {
      s << indent << "  aux2_stat_bits[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.aux2_stat_bits[i]);
    }
    s << indent << "aux2_stat_strs[]" << std::endl;
    for (size_t i = 0; i < v.aux2_stat_strs.size(); ++i)
    {
      s << indent << "  aux2_stat_strs[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.aux2_stat_strs[i]);
    }
    s << indent << "aux3_stat_bits[]" << std::endl;
    for (size_t i = 0; i < v.aux3_stat_bits.size(); ++i)
    {
      s << indent << "  aux3_stat_bits[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.aux3_stat_bits[i]);
    }
    s << indent << "aux3_stat_strs[]" << std::endl;
    for (size_t i = 0; i < v.aux3_stat_strs.size(); ++i)
    {
      s << indent << "  aux3_stat_strs[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.aux3_stat_strs[i]);
    }
    s << indent << "aux4_stat_bits[]" << std::endl;
    for (size_t i = 0; i < v.aux4_stat_bits.size(); ++i)
    {
      s << indent << "  aux4_stat_bits[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.aux4_stat_bits[i]);
    }
    s << indent << "aux4_stat_strs[]" << std::endl;
    for (size_t i = 0; i < v.aux4_stat_strs.size(); ++i)
    {
      s << indent << "  aux4_stat_strs[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.aux4_stat_strs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_RXSTATUS_H
