// Generated by gencpp from file novatel_oem7_msgs/SubscriptionType.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_SUBSCRIPTIONTYPE_H
#define NOVATEL_OEM7_MSGS_MESSAGE_SUBSCRIPTIONTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct SubscriptionType_
{
  typedef SubscriptionType_<ContainerAllocator> Type;

  SubscriptionType_()
    : type(0)  {
    }
  SubscriptionType_(const ContainerAllocator& _alloc)
    : type(0)  {
  (void)_alloc;
    }



   typedef uint32_t _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNASSIGNED)
  #undef UNASSIGNED
#endif
#if defined(_WIN32) && defined(TERM)
  #undef TERM
#endif
#if defined(_WIN32) && defined(MODEL)
  #undef MODEL
#endif
#if defined(_WIN32) && defined(BUBBLE)
  #undef BUBBLE
#endif
#if defined(_WIN32) && defined(INCOMPATIBLE_SUBSCRIPTION)
  #undef INCOMPATIBLE_SUBSCRIPTION
#endif

  enum {
    UNASSIGNED = 0u,
    TERM = 1u,
    MODEL = 5u,
    BUBBLE = 100u,
    INCOMPATIBLE_SUBSCRIPTION = 104u,
  };


  typedef boost::shared_ptr< ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator> const> ConstPtr;

}; // struct SubscriptionType_

typedef ::novatel_oem7_msgs::SubscriptionType_<std::allocator<void> > SubscriptionType;

typedef boost::shared_ptr< ::novatel_oem7_msgs::SubscriptionType > SubscriptionTypePtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::SubscriptionType const> SubscriptionTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5466df73441d34466ce8722bfff18095";
  }

  static const char* value(const ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5466df73441d3446ULL;
  static const uint64_t static_value2 = 0x6ce8722bfff18095ULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/SubscriptionType";
  }

  static const char* value(const ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 UNASSIGNED                  = 0\n"
"uint32 TERM                        = 1\n"
"uint32 MODEL                       = 5\n"
"uint32 BUBBLE                      = 100\n"
"uint32 INCOMPATIBLE_SUBSCRIPTION   = 104\n"
"\n"
"\n"
"uint32 type\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SubscriptionType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_SUBSCRIPTIONTYPE_H
