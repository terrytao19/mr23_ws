// Generated by gencpp from file novatel_oem7_msgs/TERRASTARSTATUS.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_TERRASTARSTATUS_H
#define NOVATEL_OEM7_MSGS_MESSAGE_TERRASTARSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <novatel_oem7_msgs/Oem7Header.h>
#include <novatel_oem7_msgs/AccessStatus.h>
#include <novatel_oem7_msgs/SyncState.h>
#include <novatel_oem7_msgs/LocalAreaStatus.h>
#include <novatel_oem7_msgs/GeogatingStatus.h>

namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct TERRASTARSTATUS_
{
  typedef TERRASTARSTATUS_<ContainerAllocator> Type;

  TERRASTARSTATUS_()
    : header()
    , nov_header()
    , access_status()
    , sync_state()
    , reserved(0)
    , local_area_status()
    , geo_status()  {
    }
  TERRASTARSTATUS_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , nov_header(_alloc)
    , access_status(_alloc)
    , sync_state(_alloc)
    , reserved(0)
    , local_area_status(_alloc)
    , geo_status(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator>  _nov_header_type;
  _nov_header_type nov_header;

   typedef  ::novatel_oem7_msgs::AccessStatus_<ContainerAllocator>  _access_status_type;
  _access_status_type access_status;

   typedef  ::novatel_oem7_msgs::SyncState_<ContainerAllocator>  _sync_state_type;
  _sync_state_type sync_state;

   typedef uint32_t _reserved_type;
  _reserved_type reserved;

   typedef  ::novatel_oem7_msgs::LocalAreaStatus_<ContainerAllocator>  _local_area_status_type;
  _local_area_status_type local_area_status;

   typedef  ::novatel_oem7_msgs::GeogatingStatus_<ContainerAllocator>  _geo_status_type;
  _geo_status_type geo_status;





  typedef boost::shared_ptr< ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator> const> ConstPtr;

}; // struct TERRASTARSTATUS_

typedef ::novatel_oem7_msgs::TERRASTARSTATUS_<std::allocator<void> > TERRASTARSTATUS;

typedef boost::shared_ptr< ::novatel_oem7_msgs::TERRASTARSTATUS > TERRASTARSTATUSPtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::TERRASTARSTATUS const> TERRASTARSTATUSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.nov_header == rhs.nov_header &&
    lhs.access_status == rhs.access_status &&
    lhs.sync_state == rhs.sync_state &&
    lhs.reserved == rhs.reserved &&
    lhs.local_area_status == rhs.local_area_status &&
    lhs.geo_status == rhs.geo_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41365371df1f93eaf8203670610bd3fb";
  }

  static const char* value(const ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41365371df1f93eaULL;
  static const uint64_t static_value2 = 0xf8203670610bd3fbULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/TERRASTARSTATUS";
  }

  static const char* value(const ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header                          header\n"
"Oem7Header                      nov_header\n"
"AccessStatus                    access_status\n"
"SyncState                       sync_state\n"
"uint32                          reserved\n"
"LocalAreaStatus                 local_area_status\n"
"GeogatingStatus                 geo_status\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/Oem7Header\n"
"uint16 OEM7MSGTYPE_LOG =  0\n"
"\n"
"\n"
"string message_name\n"
"uint16 message_id\n"
"uint8  message_type\n"
"uint32 sequence_number\n"
"uint8  time_status\n"
"uint16 gps_week_number\n"
"uint32 gps_week_milliseconds\n"
"\n"
"\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/AccessStatus\n"
"uint32 DISABLE  = 0\n"
"uint32 ENABLE   = 1\n"
"\n"
"\n"
"uint32 status\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/SyncState\n"
"uint32 NO_SIGNAL  = 0\n"
"uint32 SEARCH     = 1\n"
"uint32 LOCKED     = 2\n"
"\n"
"\n"
"uint32 state\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/LocalAreaStatus\n"
"uint32 DISABLED                = 0\n"
"uint32 WAITING_FOR_POSITION    = 1\n"
"uint32 RANGE_CHECK             = 16\n"
"uint32 IN_RANGE                = 129\n"
"uint32 OUT_OF_RANGE            = 130\n"
"uint32 POSITION_TOO_OLD        = 255\n"
"\n"
"\n"
"uint32 status\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/GeogatingStatus\n"
"uint32 DISABLED                = 0\n"
"uint32 WAITING_FOR_POSITION    = 1\n"
"uint32 ONSHORE                 = 129\n"
"uint32 OFFSHORE                = 130\n"
"uint32 POSITION_TOO_OLD        = 255\n"
"uint32 PROCESSING              = 1000\n"
"\n"
"\n"
"uint32 status\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.nov_header);
      stream.next(m.access_status);
      stream.next(m.sync_state);
      stream.next(m.reserved);
      stream.next(m.local_area_status);
      stream.next(m.geo_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TERRASTARSTATUS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::TERRASTARSTATUS_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "nov_header: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> >::stream(s, indent + "  ", v.nov_header);
    s << indent << "access_status: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::AccessStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.access_status);
    s << indent << "sync_state: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::SyncState_<ContainerAllocator> >::stream(s, indent + "  ", v.sync_state);
    s << indent << "reserved: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.reserved);
    s << indent << "local_area_status: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::LocalAreaStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.local_area_status);
    s << indent << "geo_status: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::GeogatingStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.geo_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_TERRASTARSTATUS_H
