// Generated by gencpp from file novatel_oem7_msgs/SolutionStatus.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_SOLUTIONSTATUS_H
#define NOVATEL_OEM7_MSGS_MESSAGE_SOLUTIONSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct SolutionStatus_
{
  typedef SolutionStatus_<ContainerAllocator> Type;

  SolutionStatus_()
    : status(0)  {
    }
  SolutionStatus_(const ContainerAllocator& _alloc)
    : status(0)  {
  (void)_alloc;
    }



   typedef uint32_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SOL_COMPUTED)
  #undef SOL_COMPUTED
#endif
#if defined(_WIN32) && defined(INSUFFICIENT_OBS)
  #undef INSUFFICIENT_OBS
#endif
#if defined(_WIN32) && defined(NO_CONVERGENCE)
  #undef NO_CONVERGENCE
#endif
#if defined(_WIN32) && defined(SINGULARITY)
  #undef SINGULARITY
#endif
#if defined(_WIN32) && defined(COV_TRACE)
  #undef COV_TRACE
#endif
#if defined(_WIN32) && defined(TEST_DIST)
  #undef TEST_DIST
#endif
#if defined(_WIN32) && defined(COLD_START)
  #undef COLD_START
#endif
#if defined(_WIN32) && defined(V_H_LIMIT)
  #undef V_H_LIMIT
#endif
#if defined(_WIN32) && defined(VARIANCE)
  #undef VARIANCE
#endif
#if defined(_WIN32) && defined(RESIDUALS)
  #undef RESIDUALS
#endif
#if defined(_WIN32) && defined(INTEGRITY_WARNING)
  #undef INTEGRITY_WARNING
#endif
#if defined(_WIN32) && defined(PENDING)
  #undef PENDING
#endif
#if defined(_WIN32) && defined(INVALID_FIX)
  #undef INVALID_FIX
#endif
#if defined(_WIN32) && defined(UNAUTHORIZED)
  #undef UNAUTHORIZED
#endif
#if defined(_WIN32) && defined(INVALID_RATE)
  #undef INVALID_RATE
#endif

  enum {
    SOL_COMPUTED = 0u,
    INSUFFICIENT_OBS = 1u,
    NO_CONVERGENCE = 2u,
    SINGULARITY = 3u,
    COV_TRACE = 4u,
    TEST_DIST = 5u,
    COLD_START = 6u,
    V_H_LIMIT = 7u,
    VARIANCE = 8u,
    RESIDUALS = 9u,
    INTEGRITY_WARNING = 13u,
    PENDING = 18u,
    INVALID_FIX = 19u,
    UNAUTHORIZED = 20u,
    INVALID_RATE = 22u,
  };


  typedef boost::shared_ptr< ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SolutionStatus_

typedef ::novatel_oem7_msgs::SolutionStatus_<std::allocator<void> > SolutionStatus;

typedef boost::shared_ptr< ::novatel_oem7_msgs::SolutionStatus > SolutionStatusPtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::SolutionStatus const> SolutionStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4b94524a053ea932ff1ea45b09cef85";
  }

  static const char* value(const ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4b94524a053ea93ULL;
  static const uint64_t static_value2 = 0x2ff1ea45b09cef85ULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/SolutionStatus";
  }

  static const char* value(const ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 SOL_COMPUTED             = 0\n"
"uint32 INSUFFICIENT_OBS         = 1\n"
"uint32 NO_CONVERGENCE            = 2\n"
"uint32 SINGULARITY              = 3\n"
"uint32 COV_TRACE                = 4\n"
"uint32 TEST_DIST                = 5\n"
"uint32 COLD_START               = 6\n"
"uint32 V_H_LIMIT                = 7\n"
"uint32 VARIANCE                 = 8\n"
"uint32 RESIDUALS                = 9\n"
"uint32 INTEGRITY_WARNING        = 13\n"
"uint32 PENDING                  = 18\n"
"uint32 INVALID_FIX              = 19\n"
"uint32 UNAUTHORIZED             = 20\n"
"uint32 INVALID_RATE             = 22\n"
"\n"
"uint32 status\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SolutionStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::SolutionStatus_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_SOLUTIONSTATUS_H
