// Generated by gencpp from file novatel_oem7_msgs/INSPVA.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_INSPVA_H
#define NOVATEL_OEM7_MSGS_MESSAGE_INSPVA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <novatel_oem7_msgs/Oem7Header.h>
#include <novatel_oem7_msgs/InertialSolutionStatus.h>

namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct INSPVA_
{
  typedef INSPVA_<ContainerAllocator> Type;

  INSPVA_()
    : header()
    , nov_header()
    , latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , north_velocity(0.0)
    , east_velocity(0.0)
    , up_velocity(0.0)
    , roll(0.0)
    , pitch(0.0)
    , azimuth(0.0)
    , status()  {
    }
  INSPVA_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , nov_header(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , north_velocity(0.0)
    , east_velocity(0.0)
    , up_velocity(0.0)
    , roll(0.0)
    , pitch(0.0)
    , azimuth(0.0)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator>  _nov_header_type;
  _nov_header_type nov_header;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _height_type;
  _height_type height;

   typedef double _north_velocity_type;
  _north_velocity_type north_velocity;

   typedef double _east_velocity_type;
  _east_velocity_type east_velocity;

   typedef double _up_velocity_type;
  _up_velocity_type up_velocity;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _azimuth_type;
  _azimuth_type azimuth;

   typedef  ::novatel_oem7_msgs::InertialSolutionStatus_<ContainerAllocator>  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::novatel_oem7_msgs::INSPVA_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::INSPVA_<ContainerAllocator> const> ConstPtr;

}; // struct INSPVA_

typedef ::novatel_oem7_msgs::INSPVA_<std::allocator<void> > INSPVA;

typedef boost::shared_ptr< ::novatel_oem7_msgs::INSPVA > INSPVAPtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::INSPVA const> INSPVAConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::INSPVA_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::INSPVA_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::INSPVA_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::INSPVA_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.nov_header == rhs.nov_header &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.height == rhs.height &&
    lhs.north_velocity == rhs.north_velocity &&
    lhs.east_velocity == rhs.east_velocity &&
    lhs.up_velocity == rhs.up_velocity &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.azimuth == rhs.azimuth &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::INSPVA_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::INSPVA_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::INSPVA_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::INSPVA_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::INSPVA_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::INSPVA_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::INSPVA_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::INSPVA_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::INSPVA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "29f9ba1f809b13b4f0eed8681b50004b";
  }

  static const char* value(const ::novatel_oem7_msgs::INSPVA_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x29f9ba1f809b13b4ULL;
  static const uint64_t static_value2 = 0xf0eed8681b50004bULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::INSPVA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/INSPVA";
  }

  static const char* value(const ::novatel_oem7_msgs::INSPVA_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::INSPVA_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header                              header\n"
"Oem7Header                          nov_header\n"
"float64                             latitude         \n"
"float64                             longitude  \n"
"float64                             height \n"
"float64                             north_velocity\n"
"float64                             east_velocity\n"
"float64                             up_velocity\n"
"float64                             roll\n"
"float64                             pitch\n"
"float64                             azimuth\n"
"InertialSolutionStatus              status\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/Oem7Header\n"
"uint16 OEM7MSGTYPE_LOG =  0\n"
"\n"
"\n"
"string message_name\n"
"uint16 message_id\n"
"uint8  message_type\n"
"uint32 sequence_number\n"
"uint8  time_status\n"
"uint16 gps_week_number\n"
"uint32 gps_week_milliseconds\n"
"\n"
"\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/InertialSolutionStatus\n"
"\n"
"uint32 INS_INACTIVE            =  0\n"
"uint32 INS_ALIGNING            =  1\n"
"uint32 INS_HIGH_VARIANCE       =  2\n"
"uint32 INS_SOLUTION_GOOD       =  3\n"
"uint32 INS_SOLUTION_FREE       =  6\n"
"uint32 INS_ALIGNMENT_COMPLETE  =  7\n"
"uint32 DETERMINING_ORIENTATION =  8\n"
"uint32 WAITING_INITIAL_POS     =  9\n"
"uint32 WAITING_AZIMUTH         = 10\n"
"uint32 INITIALIZING_BIASES     = 11\n"
"uint32 MOTION_DETECT           = 12\n"
"\n"
"uint32 status\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::INSPVA_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::INSPVA_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.nov_header);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.height);
      stream.next(m.north_velocity);
      stream.next(m.east_velocity);
      stream.next(m.up_velocity);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.azimuth);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct INSPVA_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::INSPVA_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::INSPVA_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "nov_header: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> >::stream(s, indent + "  ", v.nov_header);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "north_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.north_velocity);
    s << indent << "east_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.east_velocity);
    s << indent << "up_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.up_velocity);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "azimuth: ";
    Printer<double>::stream(s, indent + "  ", v.azimuth);
    s << indent << "status: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::InertialSolutionStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_INSPVA_H
