// Generated by gencpp from file novatel_oem7_msgs/TERRASTARINFO.msg
// DO NOT EDIT!


#ifndef NOVATEL_OEM7_MSGS_MESSAGE_TERRASTARINFO_H
#define NOVATEL_OEM7_MSGS_MESSAGE_TERRASTARINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <novatel_oem7_msgs/Oem7Header.h>
#include <novatel_oem7_msgs/SubscriptionType.h>
#include <novatel_oem7_msgs/SubscriptionPermission.h>
#include <novatel_oem7_msgs/RegionRestriction.h>

namespace novatel_oem7_msgs
{
template <class ContainerAllocator>
struct TERRASTARINFO_
{
  typedef TERRASTARINFO_<ContainerAllocator> Type;

  TERRASTARINFO_()
    : header()
    , nov_header()
    , product_activation_code()
    , sub_type()
    , sub_permission()
    , service_end_day_of_year(0)
    , service_end_year(0)
    , reserved(0)
    , region_restriction()
    , center_point_latitude(0.0)
    , center_point_longitude(0.0)
    , radius(0)  {
    }
  TERRASTARINFO_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , nov_header(_alloc)
    , product_activation_code(_alloc)
    , sub_type(_alloc)
    , sub_permission(_alloc)
    , service_end_day_of_year(0)
    , service_end_year(0)
    , reserved(0)
    , region_restriction(_alloc)
    , center_point_latitude(0.0)
    , center_point_longitude(0.0)
    , radius(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator>  _nov_header_type;
  _nov_header_type nov_header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _product_activation_code_type;
  _product_activation_code_type product_activation_code;

   typedef  ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator>  _sub_type_type;
  _sub_type_type sub_type;

   typedef  ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator>  _sub_permission_type;
  _sub_permission_type sub_permission;

   typedef uint32_t _service_end_day_of_year_type;
  _service_end_day_of_year_type service_end_day_of_year;

   typedef uint32_t _service_end_year_type;
  _service_end_year_type service_end_year;

   typedef uint32_t _reserved_type;
  _reserved_type reserved;

   typedef  ::novatel_oem7_msgs::RegionRestriction_<ContainerAllocator>  _region_restriction_type;
  _region_restriction_type region_restriction;

   typedef float _center_point_latitude_type;
  _center_point_latitude_type center_point_latitude;

   typedef float _center_point_longitude_type;
  _center_point_longitude_type center_point_longitude;

   typedef uint32_t _radius_type;
  _radius_type radius;





  typedef boost::shared_ptr< ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator> const> ConstPtr;

}; // struct TERRASTARINFO_

typedef ::novatel_oem7_msgs::TERRASTARINFO_<std::allocator<void> > TERRASTARINFO;

typedef boost::shared_ptr< ::novatel_oem7_msgs::TERRASTARINFO > TERRASTARINFOPtr;
typedef boost::shared_ptr< ::novatel_oem7_msgs::TERRASTARINFO const> TERRASTARINFOConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.nov_header == rhs.nov_header &&
    lhs.product_activation_code == rhs.product_activation_code &&
    lhs.sub_type == rhs.sub_type &&
    lhs.sub_permission == rhs.sub_permission &&
    lhs.service_end_day_of_year == rhs.service_end_day_of_year &&
    lhs.service_end_year == rhs.service_end_year &&
    lhs.reserved == rhs.reserved &&
    lhs.region_restriction == rhs.region_restriction &&
    lhs.center_point_latitude == rhs.center_point_latitude &&
    lhs.center_point_longitude == rhs.center_point_longitude &&
    lhs.radius == rhs.radius;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator1> & lhs, const ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace novatel_oem7_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0de412dfceef754375192573adc2124";
  }

  static const char* value(const ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0de412dfceef754ULL;
  static const uint64_t static_value2 = 0x375192573adc2124ULL;
};

template<class ContainerAllocator>
struct DataType< ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "novatel_oem7_msgs/TERRASTARINFO";
  }

  static const char* value(const ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header                          header\n"
"Oem7Header                      nov_header\n"
"string                          product_activation_code\n"
"SubscriptionType                sub_type\n"
"SubscriptionPermission          sub_permission\n"
"uint32                          service_end_day_of_year\n"
"uint32                          service_end_year\n"
"uint32                          reserved\n"
"RegionRestriction               region_restriction\n"
"float32                         center_point_latitude\n"
"float32                         center_point_longitude\n"
"uint32                          radius\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/Oem7Header\n"
"uint16 OEM7MSGTYPE_LOG =  0\n"
"\n"
"\n"
"string message_name\n"
"uint16 message_id\n"
"uint8  message_type\n"
"uint32 sequence_number\n"
"uint8  time_status\n"
"uint16 gps_week_number\n"
"uint32 gps_week_milliseconds\n"
"\n"
"\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/SubscriptionType\n"
"uint32 UNASSIGNED                  = 0\n"
"uint32 TERM                        = 1\n"
"uint32 MODEL                       = 5\n"
"uint32 BUBBLE                      = 100\n"
"uint32 INCOMPATIBLE_SUBSCRIPTION   = 104\n"
"\n"
"\n"
"uint32 type\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/SubscriptionPermission\n"
"uint32 RESERVED_1                = 511             # 0x000001FF\n"
"uint32 TERRASTAR_C_SERVICE       = 512             # 0x00000200\n"
"uint32 TERRASTAR_L_SERVICE       = 1024            # 0x00000400\n"
"uint32 RTK_ASSIST_SERVICE        = 2048            # 0x00000800\n"
"uint32 RTK_ASSIST_PRO_SERVICE    = 4096            # 0x00001000\n"
"uint32 TERRASTAR_C_PRO_SERVICE   = 8192            # 0x00002000\n"
"uint32 TERRASTAR_X_SERVICE       = 16384           # 0x00004000\n"
"uint32 RESERVED_2                = 4294934528      # 0xFFFF8000\n"
"\n"
"\n"
"uint32 permission\n"
"================================================================================\n"
"MSG: novatel_oem7_msgs/RegionRestriction\n"
"uint32 NONE           = 0\n"
"uint32 GEOGATED       = 1\n"
"uint32 LOCAL_AREA     = 2\n"
"uint32 NEARSHORE      = 3\n"
"\n"
"uint32 restriction\n"
;
  }

  static const char* value(const ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.nov_header);
      stream.next(m.product_activation_code);
      stream.next(m.sub_type);
      stream.next(m.sub_permission);
      stream.next(m.service_end_day_of_year);
      stream.next(m.service_end_year);
      stream.next(m.reserved);
      stream.next(m.region_restriction);
      stream.next(m.center_point_latitude);
      stream.next(m.center_point_longitude);
      stream.next(m.radius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TERRASTARINFO_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::novatel_oem7_msgs::TERRASTARINFO_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "nov_header: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::Oem7Header_<ContainerAllocator> >::stream(s, indent + "  ", v.nov_header);
    s << indent << "product_activation_code: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.product_activation_code);
    s << indent << "sub_type: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::SubscriptionType_<ContainerAllocator> >::stream(s, indent + "  ", v.sub_type);
    s << indent << "sub_permission: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::SubscriptionPermission_<ContainerAllocator> >::stream(s, indent + "  ", v.sub_permission);
    s << indent << "service_end_day_of_year: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.service_end_day_of_year);
    s << indent << "service_end_year: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.service_end_year);
    s << indent << "reserved: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.reserved);
    s << indent << "region_restriction: ";
    s << std::endl;
    Printer< ::novatel_oem7_msgs::RegionRestriction_<ContainerAllocator> >::stream(s, indent + "  ", v.region_restriction);
    s << indent << "center_point_latitude: ";
    Printer<float>::stream(s, indent + "  ", v.center_point_latitude);
    s << indent << "center_point_longitude: ";
    Printer<float>::stream(s, indent + "  ", v.center_point_longitude);
    s << indent << "radius: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.radius);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NOVATEL_OEM7_MSGS_MESSAGE_TERRASTARINFO_H
