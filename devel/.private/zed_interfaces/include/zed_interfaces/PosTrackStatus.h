// Generated by gencpp from file zed_interfaces/PosTrackStatus.msg
// DO NOT EDIT!


#ifndef ZED_INTERFACES_MESSAGE_POSTRACKSTATUS_H
#define ZED_INTERFACES_MESSAGE_POSTRACKSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zed_interfaces
{
template <class ContainerAllocator>
struct PosTrackStatus_
{
  typedef PosTrackStatus_<ContainerAllocator> Type;

  PosTrackStatus_()
    : status(0)  {
    }
  PosTrackStatus_(const ContainerAllocator& _alloc)
    : status(0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SEARCHING)
  #undef SEARCHING
#endif
#if defined(_WIN32) && defined(OK)
  #undef OK
#endif
#if defined(_WIN32) && defined(OFF)
  #undef OFF
#endif
#if defined(_WIN32) && defined(FPS_TOO_LOW)
  #undef FPS_TOO_LOW
#endif
#if defined(_WIN32) && defined(SEARCHING_FLOOR_PLANE)
  #undef SEARCHING_FLOOR_PLANE
#endif

  enum {
    SEARCHING = 0u,
    OK = 1u,
    OFF = 2u,
    FPS_TOO_LOW = 3u,
    SEARCHING_FLOOR_PLANE = 3u,
  };


  typedef boost::shared_ptr< ::zed_interfaces::PosTrackStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zed_interfaces::PosTrackStatus_<ContainerAllocator> const> ConstPtr;

}; // struct PosTrackStatus_

typedef ::zed_interfaces::PosTrackStatus_<std::allocator<void> > PosTrackStatus;

typedef boost::shared_ptr< ::zed_interfaces::PosTrackStatus > PosTrackStatusPtr;
typedef boost::shared_ptr< ::zed_interfaces::PosTrackStatus const> PosTrackStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zed_interfaces::PosTrackStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zed_interfaces::PosTrackStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zed_interfaces::PosTrackStatus_<ContainerAllocator1> & lhs, const ::zed_interfaces::PosTrackStatus_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zed_interfaces::PosTrackStatus_<ContainerAllocator1> & lhs, const ::zed_interfaces::PosTrackStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zed_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::zed_interfaces::PosTrackStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zed_interfaces::PosTrackStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zed_interfaces::PosTrackStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zed_interfaces::PosTrackStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zed_interfaces::PosTrackStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zed_interfaces::PosTrackStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zed_interfaces::PosTrackStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16c87ef5951f2667d385cacb152a0d50";
  }

  static const char* value(const ::zed_interfaces::PosTrackStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16c87ef5951f2667ULL;
  static const uint64_t static_value2 = 0xd385cacb152a0d50ULL;
};

template<class ContainerAllocator>
struct DataType< ::zed_interfaces::PosTrackStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zed_interfaces/PosTrackStatus";
  }

  static const char* value(const ::zed_interfaces::PosTrackStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zed_interfaces::PosTrackStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Status constants\n"
"# SEARCHING - The camera is searching for a previously known position to locate itself\n"
"# OK - Positional tracking is working normally\n"
"# OFF - Positional tracking is not enabled.\n"
"# FPS_TOO_LOW - Effective FPS is too low to give proper results for motion tracking. Consider using PERFORMANCES parameters (DEPTH_MODE_PERFORMANCE, low camera resolution (VGA,HD720))\n"
"# SEARCHING_FLOOR_PLANE - The camera is searching for the floor plane to locate itself related to it, the REFERENCE_FRAME::WORLD will be set afterward.\n"
"uint8 SEARCHING=0 \n"
"uint8 OK = 1\n"
"uint8 OFF = 2\n"
"uint8 FPS_TOO_LOW = 3\n"
"uint8 SEARCHING_FLOOR_PLANE = 3\n"
"\n"
"# Status\n"
"uint8 status\n"
;
  }

  static const char* value(const ::zed_interfaces::PosTrackStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zed_interfaces::PosTrackStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PosTrackStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zed_interfaces::PosTrackStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zed_interfaces::PosTrackStatus_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZED_INTERFACES_MESSAGE_POSTRACKSTATUS_H
